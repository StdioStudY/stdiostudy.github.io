{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to 681",
    "subtitle": "欢迎来到681",
    "icon": "https://stdiostudy.github.io/images/favicon.ico",
    "description": "书山有路勤为径，学海无涯苦作舟。",
    "home_page_url": "https://StdioStudY.github.io",
    "items": [
        {
            "id": "https://stdiostudy.github.io/A-General-Course-in-Electromagnetism/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/",
            "url": "https://stdiostudy.github.io/A-General-Course-in-Electromagnetism/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/",
            "title": "补充《电磁学通论》的库伦扭秤实验",
            "date_published": "2022-03-30T03:08:42.000Z",
            "content_html": "<h1 id=\"补充电磁学通论的库伦扭秤实验\"><a class=\"anchor\" href=\"#补充电磁学通论的库伦扭秤实验\">#</a> 补充《电磁学通论》的库伦扭秤实验</h1>\n<p>简介：库伦定律是由法国物理学家库伦（C.A. de Coulomb) 在扭秤实验研究的基础上建立的两个点电荷相对作用力之间的规律。</p>\n<h2 id=\"扭秤实验\"><a class=\"anchor\" href=\"#扭秤实验\">#</a> 扭秤实验</h2>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/F21E29BB83B019360634EFE11BA46750.jpg\" alt=\"\" /></p>\n<p>库仑扭秤由悬丝、横杆、两个带电金属小球（库仑最初的实验是用带电木髓小球进行的），一个平衡小球，一个递电小球、旋钮和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTclQTMlODElRTklOTglQkIlRTUlQjAlQkMvMTAyNTcxOA==\">电磁阻尼</span>部分等组成。两个带电金属小球中，一个固定在绝缘竖直支杆上，另一个固定在水平绝缘横杆的一端，横杆的另一端固定一个平衡小球。横杆的中心用悬丝吊起，和顶部的旋钮相连，转动旋钮，可以扭转悬丝带动绝缘横杆转动，停在某一适当的位置。横杆上的金属小球（称为动球）和竖直支杆上的固定小球都在以 O 为圆心，半杆长 L 为半径的圆周上，动球相对于固定小球的位置，可通过扭秤外壳上的刻线标出的圆心角来读出。当两个金属小球带电时，横杆在动球受到的库仑力力矩作用下旋转，悬丝发生扭转形变，悬丝的扭转力矩和库仑力力矩相平衡时，横杆处于静止状态。</p>\n<p>简单来说:<strong> 就是用丝绸摩擦过的玻璃棒来触碰一个不带电的小球，使其带负电。从玻璃罩上方进入，带负电的金属球发生偏转，达到平衡后从旋钮上的读角器读出角度，透过角度来计算库伦力使小球偏转的位移。</strong></p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/BCA7335528A2779F7722274077CB5332.jpg\" alt=\"\" /></p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/4DD08DB8BAA7AE60387A96253CA46866.jpg\" alt=\"\" /></p>\n<p>（字丑请见谅）</p>\n<h2 id=\"库伦定律的得出\"><a class=\"anchor\" href=\"#库伦定律的得出\">#</a> 库伦定律的得出</h2>\n<h3 id=\"如何测出库伦力的大小\"><a class=\"anchor\" href=\"#如何测出库伦力的大小\">#</a> 如何测出库伦力的大小？</h3>\n<p>当然静电力是微弱的，但我们可以通过杠杆原理中的省力杠杆来实现（<strong>较小的力通过较长的力臂，产生较大的力矩，从而产生较大的转动，放大了作用效果</strong>）</p>\n<p>当平衡时库伦力力矩和扭转力矩相等：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>库伦力力矩</mtext><mi>M</mi><mtext>库</mtext><mo>=</mo><mi>M</mi><mtext>扭（扭转力矩）</mtext></mrow><annotation encoding=\"application/x-tex\">库伦力力矩M库=M扭（扭转力矩）\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">库</span><span class=\"mord cjk_fallback\">伦</span><span class=\"mord cjk_fallback\">力</span><span class=\"mord cjk_fallback\">力</span><span class=\"mord cjk_fallback\">矩</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">库</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">扭</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">扭</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">力</span><span class=\"mord cjk_fallback\">矩</span><span class=\"mord cjk_fallback\">）</span></span></span></span></span></p>\n<p>也就是</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mn>1</mn><mo>∗</mo><mi>l</mi><mn>1</mn><mo>=</mo><mi>F</mi><mn>2</mn><mo>∗</mo><mi>l</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">F1*l1=F2*l2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">2</span></span></span></span></span></p>\n<p>（F1 为库仑力，L 为横杆的一半，l1=l2)</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mn>2</mn><mtext>为扭力，</mtext><mi>F</mi><mn>2</mn><mo>=</mo><mi>M</mi><mtext>扭</mtext><mi mathvariant=\"normal\">/</mi><mi>l</mi><mn>2</mn><mo separator=\"true\">,</mo><mi>M</mi><mtext>扭</mtext><mo>=</mo><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">F2为扭力，F2=M扭/l2,M扭=?\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">扭</span><span class=\"mord cjk_fallback\">力</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">扭</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">扭</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mclose\">?</span></span></span></span></span></p>\n<p>如何知道这个扭转力矩呢？解决这个问题的是库伦的另一个定律：<strong>扭力定律</strong></p>\n<p>扭力定律这里不需要细说了，我们只需要知道它的结论：扭转力矩与悬丝的扭转角成正比，与悬丝直径的四次方成正比，与悬丝的长度成反比就行了。</p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/6HC%7DH2NC3LG06A$78XLFDQ.png\" alt=\"\" /></p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/0K1__JAJ_%60FS%7BTB4H0WKQ2.png\" alt=\"\" /></p>\n<p>由此，我们可以通过角度计算出库伦力的大小了</p>\n<p>那么库仑力与距离的关系呢？</p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/7S@OC%5BLSF%7DQU7LRP%25D_Q$T.png\" alt=\"\" /></p>\n<p>由此我们可以得到两个电荷的距离为 4:2:1 时，扭转角为 1:4:16，因为扭力大小与扭转角之间成正比，所以库伦力与电荷之间的距离成反比。</p>\n<p>那与电量成什么？</p>\n<p>以当时的手段，无法测出电量，但是我们却可以定量分析，我们可以保持距离一定，测量一次偏转角度，然后带电小球与另一个不带电的小球触碰，根据电量均分原理，带电小球的电量将减少一半，然后再保持相同距离测一次偏转角度。</p>\n<p>由此我们可以知道，库仑力是与电量成正比的，这些关系被概括成一个表达式，便是库伦定律的表达式了。</p>\n<p><img data-src=\"/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/%5BUNC$%5BIN4S8@M2%607WK2SU15.png\" alt=\"\" /></p>\n<hr />\n<p>参考文献:</p>\n<ul>\n<li>\n<p>[扭秤实验 - 百度百科](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODklQUQlRTclQTclQTQlRTUlQUUlOUUlRTklQUElOEMvNjM2Mzc3OT9mcj1hbGFkZGlu\">扭秤实验_百度百科 (baidu.com)</span>)</p>\n</li>\n<li>\n<p>《电磁学通论》- 北京大学出版社</p>\n</li>\n<li>\n<p>[库伦扭秤 - 百度百科](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOTMlRTQlQkIlOTElRTYlODklQUQlRTclQTclQTQvOTM5MzcxNA==\">库仑扭秤_百度百科 (baidu.com)</span>)</p>\n</li>\n</ul>\n",
            "tags": [
                "电磁学通论",
                "电磁学,库仑定律"
            ]
        },
        {
            "id": "https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "url": "https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "title": "关于博客图片无法显示的解决办法",
            "date_published": "2022-03-29T04:16:29.000Z",
            "content_html": "<h2 id=\"关于博客图片无法显示的解决办法\"><a class=\"anchor\" href=\"#关于博客图片无法显示的解决办法\">#</a> 关于博客图片无法显示的解决办法</h2>\n<p>大家好，我是 Lyang</p>\n<p>本人在尝试多种方法后，最终确定了一个能稳定显示本地图片的办法。</p>\n<p>首先我们要先了解 GitHub 的原理，它的原理是作为一个库来储存数据，达到建立网站的目的。hexo 便是一个能够运行网站，建立主题的插件。他们都是通过 win+r 运行 cmd 实现。（具体如何建立网站，以后我会详细写一个博客）</p>\n<p>界面美化：hexo</p>\n<ol>\n<li>安装插件。</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ npm install hexo-renderer-marked --save</pre></td></tr></table></figure><p>2. 再修改一下配置文件_config.yml，加入下面的配置。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>marked:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  prependRoot: true</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  postAsset: true</pre></td></tr></table></figure><p>如图所示：</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122703181.png\" alt=\"image-20220329122703181\" /></p>\n<p>3. 在 “Blog-&gt;source” 下新建 &quot;imags&quot; 文件夹。注意 &quot;imags&quot; 与 &quot;_posts&quot; 同级。</p>\n<p>4. 在 Typora 中 “文件 -&gt; 设置偏好 -&gt; 图像 “。在插入图片时” 复制到指定路径 “设置为</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>../../source/images//$&#123;filename&#125;</pre></td></tr></table></figure><p>以此图为例：</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/O_$7LOIQV$E@I9P%5D@VFI82F.png\" alt=\"1\" /></p>\n<p>5. 在” 格式 -&gt; 图像 -&gt; 设置图片根目录 “将 &quot;Blog-&gt;source&quot; 设置为根目录。</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122525499.png\" alt=\"image-20220329122525499\" /></p>\n<p>如此设置便可以正确显示图像。</p>\n<p>最后 hexo g 运行，hexo d 储存在服务器即可。</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122844928.png\" alt=\"image-20220329122844928\" /></p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122922734.png\" alt=\"image-20220329122922734\" /></p>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        },
        {
            "id": "https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "url": "https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "title": "C++基础入门",
            "date_published": "2022-03-29T03:51:16.000Z",
            "content_html": "<h1 id=\"c基础入门\"><a class=\"anchor\" href=\"#c基础入门\">#</a> C++ 基础入门</h1>\n<h2 id=\"1-c初识\"><a class=\"anchor\" href=\"#1-c初识\">#</a> 1 C++ 初识</h2>\n<h3 id=\"11-第一个c程序\"><a class=\"anchor\" href=\"#11-第一个c程序\">#</a> 1.1  第一个 C++ 程序</h3>\n<p>编写一个 C++ 程序总共分为 4 个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"111-创建项目\"><a class=\"anchor\" href=\"#111-创建项目\">#</a> 1.1.1 创建项目</h4>\n<p>​\tVisual Studio 是我们用来编写 C++ 程序的主要工具，我们先将它打开</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383178746-16486280798692.png\" alt=\"\" /></p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384366413.png\" alt=\"1541384366413\" /></p>\n<h4 id=\"112-创建文件\"><a class=\"anchor\" href=\"#112-创建文件\">#</a> 1.1.2 创建文件</h4>\n<p>右键源文件，选择添加 -&gt; 新建项</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383817248.png\" alt=\"1541383817248\" /></p>\n<p>给 C++ 文件起个名称，然后点击添加即可。</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384140042-16486282805841.png\" alt=\"1541384140042\" /></p>\n<h4 id=\"113-编写代码\"><a class=\"anchor\" href=\"#113-编写代码\">#</a> 1.1.3 编写代码</h4>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"114-运行程序\"><a class=\"anchor\" href=\"#114-运行程序\">#</a> 1.1.4 运行程序</h4>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384818688.png\" alt=\"1541384818688\" /></p>\n<h3 id=\"12-注释\"><a class=\"anchor\" href=\"#12-注释\">#</a> 1.2 注释</h3>\n<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>： <code>// 描述信息</code>\n<ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>：  <code>/* 描述信息 */</code>\n<ul>\n<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"13-变量\"><a class=\"anchor\" href=\"#13-变量\">#</a> 1.3 变量</h3>\n<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>： <code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"14-常量\"><a class=\"anchor\" href=\"#14-常量\">#</a> 1.4  常量</h3>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++ 定义常量两种方式</p>\n<ol>\n<li>\n<p><strong>#define</strong> 宏常量：  <code>#define 常量名 常量值</code></p>\n<ul>\n<li><mark>通常在文件上方定义</mark>，表示一个常量</li>\n</ul>\n</li>\n<li>\n<p><strong>const</strong> 修饰的变量  <code>const 数据类型 常量名 = 常量值</code></p>\n<ul>\n<li><mark>通常在变量定义前加关键字 const</mark>，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1、宏常量\n#define day 7\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"15-关键字\"><a class=\"anchor\" href=\"#15-关键字\">#</a> 1.5 关键字</h3>\n<p>** 作用：** 关键字是 C++ 中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++ 关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"16-标识符命名规则\"><a class=\"anchor\" href=\"#16-标识符命名规则\">#</a> 1.6 标识符命名规则</h3>\n<p><strong>作用</strong>：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<h2 id=\"2-数据类型\"><a class=\"anchor\" href=\"#2-数据类型\">#</a> 2 数据类型</h2>\n<p>C++ 规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h3 id=\"21-整型\"><a class=\"anchor\" href=\"#21-整型\">#</a> 2.1 整型</h3>\n<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>\n<p>C++ 中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short (短整型)</td>\n<td>2 字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int (整型)</td>\n<td>4 字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long (长整形)</td>\n<td>Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long (长长整形)</td>\n<td>8 字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"22-sizeof关键字\"><a class=\"anchor\" href=\"#22-sizeof关键字\">#</a> 2.2 sizeof 关键字</h3>\n<p>** 作用：** 利用 sizeof 关键字可以<mark>统计数据类型所占内存大小</mark></p>\n<p><strong>语法：</strong>  <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><strong>整型结论</strong>：<mark>short &lt; int &lt;= long &lt;= long long</mark></p>\n</blockquote>\n<h3 id=\"23-实型浮点型\"><a class=\"anchor\" href=\"#23-实型浮点型\">#</a> 2.3 实型（浮点型）</h3>\n<p><strong>作用</strong>：用于<mark>表示小数</mark></p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度 float</li>\n<li>双精度 double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n<td>7 位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 字节</td>\n<td>15～16 位有效数字</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout &lt;&lt; f1 &lt;&lt; endl;\n\tcout &lt;&lt; d1&lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"24-字符型\"><a class=\"anchor\" href=\"#24-字符型\">#</a> 2.4 字符型</h3>\n<p>** 作用：** 字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong> <code>char ch = 'a';</code></p>\n<blockquote>\n<p>注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意 2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C 和 C++ 中字符型变量只占用<mark> 1 个字节</mark>。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\tchar ch = 'a';\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char) &lt;&lt; endl;\n\n\t//ch = &quot;abcde&quot;; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>ASCII 码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`        |</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"25-转义字符\"><a class=\"anchor\" href=\"#25-转义字符\">#</a> 2.5 转义字符</h3>\n<p>** 作用：** 用于表示一些<mark>不能显示出来的 ASCII 字符</mark></p>\n<p>现阶段我们常用的转义字符有： <code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong> 码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格 (BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页 (FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行 (LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车 (CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表 (HT)  （跳到下一个 TAB 位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表 (VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><strong>\\\\</strong></td>\n<td><strong>代表一个反斜线字符 &quot;&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>'</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字 0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8 进制转义字符，d 范围 0~7</td>\n<td>3 位 8 进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16 进制转义字符，h 范围 0<sub>9，a</sub>f，A~F</td>\n<td>3 位 16 进制</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\t\n\tcout &lt;&lt; &quot;\\\\&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\tHello&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\n&quot; &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"26-字符串型\"><a class=\"anchor\" href=\"#26-字符串型\">#</a> 2.6 字符串型</h3>\n<p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li>\n<p><strong>C 风格字符串</strong>：  <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tchar str1[] = &quot;hello world&quot;;\n\tcout &lt;&lt; str1 &lt;&lt; endl;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：C 风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li>\n<p><strong>C++ 风格字符串</strong>：   <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tstring str = &quot;hello world&quot;;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：C++ 风格字符串，需要加入头文件 ==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"27-布尔类型-bool\"><a class=\"anchor\" href=\"#27-布尔类型-bool\">#</a> 2.7 布尔类型 bool</h3>\n<p>** 作用：** 布尔数据类型代表真或假的值</p>\n<p>bool 类型只有两个值：</p>\n<ul>\n<li>true  --- 真（本质是 1）</li>\n<li>false --- 假（本质是 0）</li>\n</ul>\n<p><strong>bool 类型占<mark> 1 个字节</mark>大小</strong></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tbool flag = true;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 1\n\n\tflag = false;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"28-数据的输入\"><a class=\"anchor\" href=\"#28-数据的输入\">#</a> 2.8 数据的输入</h3>\n<p><strong>作用：用于从键盘获取数据</strong></p>\n<p>** 关键字：**cin</p>\n<p><strong>语法：</strong>  <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main()&#123;\n\n\t//整型输入\n\tint a = 0;\n\tcout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\tcout &lt;&lt; a &lt;&lt; endl;\n\n\t//浮点型输入\n\tdouble d = 0;\n\tcout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; d;\n\tcout &lt;&lt; d &lt;&lt; endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; ch;\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; str;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; flag;\n\tcout &lt;&lt; flag &lt;&lt; endl;\n\tsystem(&quot;pause&quot;);\n\treturn EXIT_SUCCESS;\n&#125;\n</code></pre>\n<h2 id=\"3-运算符\"><a class=\"anchor\" href=\"#3-运算符\">#</a> 3 运算符</h2>\n<p>** 作用：** 用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"31-算术运算符\"><a class=\"anchor\" href=\"#31-算术运算符\">#</a> 3.1 算术运算符</h3>\n<p><strong>作用</strong>：用于处理四则运算</p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 (取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>前置递减</td>\n<td>a=2; b=--a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>后置递减</td>\n<td>a=2; b=a--;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">//加减乘除\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout &lt;&lt; a2 / b2 &lt;&lt; endl; \n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0\n\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.25;\n\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：在除法运算中，除数不能为 0</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">//取模\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout &lt;&lt; 10 % 3 &lt;&lt; endl;\n\n\tint a2 = 10;\n\tint b2 = 20;\n\n\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;\n\n\tint a3 = 10;\n\tint b3 = 0;\n\n\t//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\n\t//cout &lt;&lt; d1 % d2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">//递增\nint main() &#123;\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout &lt;&lt; a &lt;&lt; endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout &lt;&lt; b &lt;&lt; endl; // 11\n\n\t//区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n\tcout &lt;&lt; b2 &lt;&lt; endl;\n\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n\tcout &lt;&lt; b3 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：前置递增先对变量进行 ++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"32-赋值运算符\"><a class=\"anchor\" href=\"#32-赋值运算符\">#</a> 3.2 赋值运算符</h3>\n<p>** 作用：** 用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//赋值运算符\n\n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"33-比较运算符\"><a class=\"anchor\" href=\"#33-比较运算符\">#</a> 3.3 比较运算符</h3>\n<p>** 作用：** 用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tcout &lt;&lt; (a == b) &lt;&lt; endl; // 0 \n\n\tcout &lt;&lt; (a != b) &lt;&lt; endl; // 1\n\n\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1\n\n\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 和 C++ 语言的比较运算中， <mark>“真” 用数字 “1” 来表示， “假” 用数字 “0” 来表示。</mark></p>\n</blockquote>\n<h3 id=\"34-逻辑运算符\"><a class=\"anchor\" href=\"#34-逻辑运算符\">#</a> 3.4 逻辑运算符</h3>\n<p>** 作用：** 用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果 a 为假，则！a 为真；  如果 a 为真，则！a 为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果 a 和 b 都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody>\n</table>\n<p>** 示例 1：** 逻辑非</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 非\nint main() &#123;\n\n\tint a = 10;\n\n\tcout &lt;&lt; !a &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; !!a &lt;&lt; endl; // 1\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p>** 示例 2：** 逻辑与</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 与\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：逻辑<mark>与</mark>运算符总结： <mark>同真为真，其余为假</mark></p>\n</blockquote>\n<p>** 示例 3：** 逻辑或</p>\n<pre><code class=\"language-c++\">//逻辑运算符  --- 或\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 0\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>逻辑<mark>或</mark>运算符总结： <mark>同假为假，其余为真</mark></p>\n</blockquote>\n<h2 id=\"4-程序流程结构\"><a class=\"anchor\" href=\"#4-程序流程结构\">#</a> 4 程序流程结构</h2>\n<p>C/C++ 支持最基本的三种程序运行结构：<mark>顺序结构、选择结构、循环结构</mark></p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"41-选择结构\"><a class=\"anchor\" href=\"#41-选择结构\">#</a> 4.1 选择结构</h3>\n<h4 id=\"411-if语句\"><a class=\"anchor\" href=\"#411-if语句\">#</a> 4.1.1 if 语句</h4>\n<p>** 作用：** 执行满足条件的语句</p>\n<p>if 语句的三种形式</p>\n<ul>\n<li>\n<p>单行格式 if 语句</p>\n</li>\n<li>\n<p>多行格式 if 语句</p>\n</li>\n<li>\n<p>多条件的 if 语句</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>单行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//选择结构-单行if语句\n\t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n\n\tint score = 0;\n\tcout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; score;\n\n\tcout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;\n\n\t//if语句\n\t//注意事项，在if判断语句后面，不要加分号\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：if 条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>\n</ol>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662519170.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>多条件的 if 语句： <code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>\n</ol>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662566808.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">\tint main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 500)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 400)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>嵌套 if 语句</strong>：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t\tif (score &gt; 700)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\telse if (score &gt; 650)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\t\n\t&#125;\n\telse if (score &gt; 500)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 400)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪 ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg\" alt=\"三只小猪\" /></p>\n<h4 id=\"412-三目运算符\"><a class=\"anchor\" href=\"#412-三目运算符\">#</a> 4.1.2 三目运算符</h4>\n<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong> <code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；</p>\n<p>如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\n\tc = a &gt; b ? a : b;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\t//C++中三目运算符返回的是变量,可以继续赋值\n\n\t(a &gt; b ? a : b) = 100;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"413-switch语句\"><a class=\"anchor\" href=\"#413-switch语句\">#</a> 4.1.3 switch 语句</h4>\n<p>** 作用：** 执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">switch(表达式)\n\n&#123;\n\n\tcase 结果1：执行语句;break;\n\n\tcase 结果2：执行语句;break;\n\n\t...\n\n\tdefault:执行语句;break;\n\n&#125;\n\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//请给电影评分 \n\t//10 ~ 9   经典   \n\t// 8 ~ 7   非常好\n\t// 6 ~ 5   一般\n\t// 5分以下 烂片\n\n\tint score = 0;\n\tcout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;\n\tcin &gt;&gt; score;\n\n\tswitch (score)\n\t&#123;\n\tcase 10:\n\tcase 9:\n\t\tcout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 7:\n\tcase 6:\n\t\tcout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;\n\t\tbreak;\n\tdefault:\n\t\tcout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;\n\t\tbreak;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意 1：switch 语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意 2：case 里如果没有 break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率高，缺点是 switch 不可以判断区间</p>\n</blockquote>\n<h3 id=\"42-循环结构\"><a class=\"anchor\" href=\"#42-循环结构\">#</a> 4.2 循环结构</h3>\n<h4 id=\"421-while循环语句\"><a class=\"anchor\" href=\"#421-while循环语句\">#</a> 4.2.1 while 循环语句</h4>\n<p>** 作用：** 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541668640382.png\" alt=\"img\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\twhile (num &lt; 10)\n\t&#123;\n\t\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while 循环练习案例：</strong><mark>猜数字</mark></p>\n<p>** 案例描述：** 系统随机生成一个 1 到 100 之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg\" alt=\"猜数字\" /></p>\n<h4 id=\"422-dowhile循环语句\"><a class=\"anchor\" href=\"#422-dowhile循环语句\">#</a> 4.2.2 do...while 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong>  <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p>** 注意：** 与 while 的区别在于<mark> do...while 会先执行一次循环语句</mark>，再判断循环条件</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541671163478.png\" alt=\"img\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\n\tdo\n\t&#123;\n\t\tcout &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\n\t&#125; while (num &lt; 10);\n\t\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：与 while 循环区别在于，do...while 先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p>** 案例描述：** 水仙花数是指一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用 do...while 语句，求出所有 3 位数中的水仙花数</p>\n<h4 id=\"423-for循环语句\"><a class=\"anchor\" href=\"#423-for循环语句\">#</a> 4.2.3 for 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>详解：</strong></p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541673704101.png\" alt=\"1541673704101\" /></p>\n<blockquote>\n<p>注意：for 循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do...while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从 1 开始数到数字 100， 如果数字个位含有 7，或者数字十位含有 7，或者该数字是 7 的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/timg.gif\" alt=\"timg\" /></p>\n<h4 id=\"424-嵌套循环\"><a class=\"anchor\" href=\"#424-嵌套循环\">#</a> 4.2.4 嵌套循环</h4>\n<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541676003486.png\" alt=\"1541676003486\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 10; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 练习案例：** 乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0006018857256120_b.jpg\" alt=\"0006018857256120_b\" /></p>\n<h3 id=\"43-跳转语句\"><a class=\"anchor\" href=\"#43-跳转语句\">#</a> 4.3 跳转语句</h3>\n<h4 id=\"431-break语句\"><a class=\"anchor\" href=\"#431-break语句\">#</a> 4.3.1 break 语句</h4>\n<p><strong>作用:</strong> 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>\n<p>break 使用的时机：</p>\n<ul>\n<li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//1、在switch 语句中使用break\n\tcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;\n\n\tint num = 0;\n\n\tcin &gt;&gt; num;\n\n\tswitch (num)\n\t&#123;\n\tcase 1:\n\t\tcout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 2:\n\t\tcout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 3:\n\t\tcout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//2、在循环语句中用break\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tif (i == 5)\n\t\t&#123;\n\t\t\tbreak; //跳出循环语句\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 10; j++)\n\t\t&#123;\n\t\t\tif (j == 5)\n\t\t\t&#123;\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"432-continue语句\"><a class=\"anchor\" href=\"#432-continue语句\">#</a> 4.3.2 continue 语句</h4>\n<p>** 作用：** 在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 100; i++)\n\t&#123;\n\t\tif (i % 2 == 0)\n\t\t&#123;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：continue 并没有使整个循环终止，而 break 会跳出循环</p>\n</blockquote>\n<h4 id=\"433-goto语句\"><a class=\"anchor\" href=\"#433-goto语句\">#</a> 4.3.3 goto 语句</h4>\n<p>** 作用：** 可以无条件跳转语句</p>\n<p><strong>语法：</strong>  <code>goto 标记;</code></p>\n<p>** 解释：** 如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;1&quot; &lt;&lt; endl;\n\n\tgoto FLAG;\n\n\tcout &lt;&lt; &quot;2&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;4&quot; &lt;&lt; endl;\n\n\tFLAG:\n\n\tcout &lt;&lt; &quot;5&quot; &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱</p>\n</blockquote>\n<h2 id=\"5-数组\"><a class=\"anchor\" href=\"#5-数组\">#</a> 5 数组</h2>\n<h3 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h3>\n<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p>** 特点 1：** 数组中的每个<mark>数据元素都是相同的数据类型</mark></p>\n<p>** 特点 2：** 数组是由<mark>连续的内存</mark>位置组成的</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541748375356.png\" alt=\"1541748375356\" /></p>\n<h3 id=\"52-一维数组\"><a class=\"anchor\" href=\"#52-一维数组\">#</a> 5.2 一维数组</h3>\n<h4 id=\"521-一维数组定义方式\"><a class=\"anchor\" href=\"#521-一维数组定义方式\">#</a> 5.2.1 一维数组定义方式</h4>\n<p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//定义方式1\n\t//数据类型 数组名[元素个数];\n\tint score[10];\n\n\t//利用下标赋值\n\tscore[0] = 100;\n\tscore[1] = 99;\n\tscore[2] = 85;\n\n\t//利用下标输出\n\tcout &lt;&lt; score[0] &lt;&lt; endl;\n\tcout &lt;&lt; score[1] &lt;&lt; endl;\n\tcout &lt;&lt; score[2] &lt;&lt; endl;\n\n\n\t//第二种定义方式\n\t//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;\n\t//如果&#123;&#125;内不足10个数据，剩余数据用0补全\n\tint score2[10] = &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;\n\t\n\t//逐个输出\n\t//cout &lt;&lt; score2[0] &lt;&lt; endl;\n\t//cout &lt;&lt; score2[1] &lt;&lt; endl;\n\n\t//一个一个输出太麻烦，因此可以利用循环进行输出\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; score2[i] &lt;&lt; endl;\n\t&#125;\n\n\t//定义方式3\n\t//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;\n\tint score3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; score3[i] &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结 2：数组中下标是从 0 开始索引</p>\n</blockquote>\n<h4 id=\"522-一维数组数组名\"><a class=\"anchor\" href=\"#522-一维数组数组名\">#</a> 5.2.2 一维数组数组名</h4>\n<p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//数组名用途\n\t//1、可以获取整个数组占用内存空间大小\n\tint arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\n\tcout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\n\n\t//2、可以通过数组名获取到数组首地址\n\tcout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;\n\n\t//arr = 100; 错误，数组名是常量，因此不可以赋值\n\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结 1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<p><strong>练习案例 1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr [5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<p>** 练习案例 2：** 数组元素逆置</p>\n<p>** 案例描述：** 请声明一个 5 个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4; 逆置后输出结果为：4,5,2,3,1);</p>\n<h4 id=\"523-冒泡排序\"><a class=\"anchor\" href=\"#523-冒泡排序\">#</a> 5.2.3 冒泡排序</h4>\n<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数 - 1，直到不需要比较</li>\n</ol>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905327273.png\" alt=\"1541905327273\" /></p>\n<p><strong>示例：</strong> 将数组 {4,2,8,0,5,7,1,3,9} 进行升序排序</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint arr[9] = &#123; 4,2,8,0,5,7,1,3,9 &#125;;\n\n\tfor (int i = 0; i &lt; 9 - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 9 - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j] &gt; arr[j + 1])\n\t\t\t&#123;\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\tfor (int i = 0; i &lt; 9; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"53-二维数组\"><a class=\"anchor\" href=\"#53-二维数组\">#</a> 5.3 二维数组</h3>\n<p>二维数组就是在一维数组上，多加一个维度。</p>\n<p><img data-src=\"/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905559138.png\" alt=\"1541905559138\" /></p>\n<h4 id=\"531-二维数组定义方式\"><a class=\"anchor\" href=\"#531-二维数组定义方式\">#</a> 5.3.1 二维数组定义方式</h4>\n<p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上 4 种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\n\tfor (int i = 0; i &lt; 2; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 3; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;\n\tint arr2[2][3] =\n\t&#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"532-二维数组数组名\"><a class=\"anchor\" href=\"#532-二维数组数组名\">#</a> 5.3.2 二维数组数组名</h4>\n<ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//二维数组数组名\n\tint arr[2][3] =\n\t&#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;\n\n\t//地址\n\tcout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"533-二维数组应用案例\"><a class=\"anchor\" href=\"#533-二维数组应用案例\">#</a> <strong>5.3.3 二维数组应用案例</strong></h4>\n<p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参考答案：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint scores[3][3] =\n\t&#123;\n\t\t&#123;100,100,100&#125;,\n\t\t&#123;90,50,100&#125;,\n\t\t&#123;60,70,80&#125;,\n\t&#125;;\n\n\tstring names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;\n\n\tfor (int i = 0; i &lt; 3; i++)\n\t&#123;\n\t\tint sum = 0;\n\t\tfor (int j = 0; j &lt; 3; j++)\n\t\t&#123;\n\t\t\tsum += scores[i][j];\n\t\t&#125;\n\t\tcout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"6-函数\"><a class=\"anchor\" href=\"#6-函数\">#</a> 6 函数</h2>\n<h3 id=\"61-概述\"><a class=\"anchor\" href=\"#61-概述\">#</a> 6.1 概述</h3>\n<p>** 作用：** 将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"62-函数的定义\"><a class=\"anchor\" href=\"#62-函数的定义\">#</a> 6.2 函数的定义</h3>\n<p>函数的定义一般主要有 5 个步骤：</p>\n<p>1、返回值类型</p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句</p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">返回值类型 函数名 （参数列表）\n&#123;\n\n       函数体语句\n\n       return表达式\n\n&#125;\n</code></pre>\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p>** 示例：** 定义一个加法函数，实现两个数相加</p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2)\n&#123;\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n</code></pre>\n<h3 id=\"63-函数的调用\"><a class=\"anchor\" href=\"#63-函数的调用\">#</a> 6.3 函数的调用</h3>\n<p>** 功能：** 使用定义好的函数</p>\n<p><strong>语法：</strong> <code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参\n&#123;\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\t//调用add函数\n\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\ta = 100;\n\tb = 100;\n\n\tsum = add(a, b);\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"64-值传递\"><a class=\"anchor\" href=\"#64-值传递\">#</a> 6.4 值传递</h3>\n<ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，<mark>如果形参发生，并不会影响实参</mark></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void swap(int num1, int num2)\n&#123;\n\tcout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\n\n\t//return ; 当函数声明时候，不需要返回值，可以不写return\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"65-函数的常见样式\"><a class=\"anchor\" href=\"#65-函数的常见样式\">#</a> <strong>6.5 函数的常见样式</strong></h3>\n<p>常见的函数样式有 4 种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数常见样式\n//1、 无参无返\nvoid test01()\n&#123;\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;\n\t//test01(); 函数调用\n&#125;\n\n//2、 有参无返\nvoid test02(int a)\n&#123;\n\tcout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n&#125;\n\n//3、无参有返\nint test03()\n&#123;\n\tcout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;\n\treturn 10;\n&#125;\n\n//4、有参有返\nint test04(int a, int b)\n&#123;\n\tcout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;\n\tint sum = a + b;\n\treturn sum;\n&#125;\n</code></pre>\n<h3 id=\"66-函数的声明\"><a class=\"anchor\" href=\"#66-函数的声明\">#</a> 6.6 函数的声明</h3>\n<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//声明可以多次，定义只能一次\n//声明\nint max(int a, int b);\nint max(int a, int b);\n//定义\nint max(int a, int b)\n&#123;\n\treturn a &gt; b ? a : b;\n&#125;\n\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout &lt;&lt; max(a, b) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"67-函数的分文件编写\"><a class=\"anchor\" href=\"#67-函数的分文件编写\">#</a> 6.7 函数的分文件编写</h3>\n<p>** 作用：** 让代码结构更加清晰</p>\n<p>函数分文件编写一般有 4 个步骤</p>\n<ol>\n<li>创建后缀名为.h 的头文件</li>\n<li>创建后缀名为.cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//swap.h文件\n#include&lt;iostream&gt;\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n\n</code></pre>\n<pre><code class=\"language-C++\">//swap.cpp文件\n#include &quot;swap.h&quot;\n\nvoid swap(int a, int b)\n&#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;\n</code></pre>\n<pre><code class=\"language-C++\">//main函数文件\n#include &quot;swap.h&quot;\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<h2 id=\"7-指针\"><a class=\"anchor\" href=\"#7-指针\">#</a> 7 指针</h2>\n<h3 id=\"71-指针的基本概念\"><a class=\"anchor\" href=\"#71-指针的基本概念\">#</a> 7.1 指针的基本概念</h3>\n<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>内存编号是从 0 开始记录的，一般用十六进制数字表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"72-指针变量的定义和使用\"><a class=\"anchor\" href=\"#72-指针变量的定义和使用\">#</a> 7.2 指针变量的定义和使用</h3>\n<p>指针变量定义语法：  <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//1、指针的定义\n\tint a = 10; //定义整型变量a\n\t\n\t//指针定义语法： 数据类型 * 变量名 ;\n\tint * p;\n\n\t//指针变量赋值\n\tp = &amp;a; //指针指向变量a的地址\n\tcout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址\n\tcout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p\n\n\t//2、指针的使用\n\t//通过*操作指针变量指向的内存\n\tcout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据，指针变量存放的是地址</li>\n<li>指针变量可以通过 &quot;*&quot; 操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结 1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结 3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"73-指针所占内存空间\"><a class=\"anchor\" href=\"#73-指针所占内存空间\">#</a> 7.3 指针所占内存空间</h3>\n<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\n\tint * p;\n\tp = &amp;a; //指针指向数据a的地址\n\n\tcout &lt;&lt; *p &lt;&lt; endl; //* 解引用\n\tcout &lt;&lt; sizeof(p) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(float *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(double *) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：所有指针类型在 32 位操作系统下是 4 个字节</p>\n</blockquote>\n<h3 id=\"74-空指针和野指针\"><a class=\"anchor\" href=\"#74-空指针和野指针\">#</a> 7.4 空指针和野指针</h3>\n<p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p>\n<p>** 用途：** 初始化指针变量</p>\n<p>** 注意：** 空指针指向的内存是不可以访问的</p>\n<p><strong>示例 1：空指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint * p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例 2：野指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//指针变量p指向内存地址编号为0x1100的空间\n\tint * p = (int *)0x1100;\n\n\t//访问野指针报错 \n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"75-const修饰指针\"><a class=\"anchor\" href=\"#75-const修饰指针\">#</a> 7.5 const 修饰指针</h3>\n<p>const 修饰指针有三种情况</p>\n<ol>\n<li>const 修饰指针   --- 常量指针</li>\n<li>const 修饰常量   --- 指针常量</li>\n<li>const 即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &amp;a; \n\tp1 = &amp;b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &amp;a;\n\t//p2 = &amp;b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &amp;a;\n\t//p3 = &amp;b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"76-指针和数组\"><a class=\"anchor\" href=\"#76-指针和数组\">#</a> 7.6 指针和数组</h3>\n<p>** 作用：** 利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\n\tint * p = arr;  //指向数组的指针\n\n\tcout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\t//利用指针遍历数组\n\t\tcout &lt;&lt; *p &lt;&lt; endl;\n\t\tp++;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"77-指针和函数\"><a class=\"anchor\" href=\"#77-指针和函数\">#</a> 7.7 指针和函数</h3>\n<p>** 作用：** 利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//值传递\nvoid swap1(int a ,int b)\n&#123;\n\tint temp = a;\n\ta = b; \n\tb = temp;\n&#125;\n//地址传递\nvoid swap2(int * p1, int *p2)\n&#123;\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\tswap1(a, b); // 值传递不会改变实参\n\n\tswap2(&amp;a, &amp;b); //地址传递会改变实参\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"78-指针-数组-函数\"><a class=\"anchor\" href=\"#78-指针-数组-函数\">#</a> 7.8 指针、数组、函数</h3>\n<p>** 案例描述：** 封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr [10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">//冒泡排序函数\nvoid bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]\n&#123;\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j] &gt; arr[j + 1])\n\t\t\t&#123;\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\n//打印数组函数\nvoid printArray(int arr[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tint arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\n\tprintArray(arr, len);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h2 id=\"8-结构体\"><a class=\"anchor\" href=\"#8-结构体\">#</a> 8 结构体</h2>\n<h3 id=\"81-结构体基本概念\"><a class=\"anchor\" href=\"#81-结构体基本概念\">#</a> 8.1 结构体基本概念</h3>\n<p>结构体属于用户<mark>自定义的数据类型</mark>，允许用户存储不同的数据类型</p>\n<h3 id=\"82-结构体定义和使用\"><a class=\"anchor\" href=\"#82-结构体定义和使用\">#</a> 8.2 结构体定义和使用</h3>\n<p><strong>语法：</strong> <code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li 成员1值=\"\" ，=\"\" 成员2值...=\"\">struct 结构体名 变量名 =</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;stu3; //结构体变量创建方式3 \n\n\nint main() &#123;\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = &quot;张三&quot;;\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;;\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;\n\n\n\tstu3.name = &quot;王五&quot;;\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：定义结构体时的关键字是 struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结 2：创建结构体变量时，关键字 struct 可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结 3：结构体变量利用操作符 ''.''  访问成员</p>\n</blockquote>\n<h3 id=\"83-结构体数组\"><a class=\"anchor\" href=\"#83-结构体数组\">#</a> 8.3 结构体数组</h3>\n<p>** 作用：** 将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong> <code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;\n\nint main() &#123;\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t&#123;\n\t\t&#123;&quot;张三&quot;,18,80 &#125;,\n\t\t&#123;&quot;李四&quot;,19,60 &#125;,\n\t\t&#123;&quot;王五&quot;,20,70 &#125;\n\t&#125;;\n\n\tfor (int i = 0; i &lt; 3; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"84-结构体指针\"><a class=\"anchor\" href=\"#84-结构体指针\">#</a> 8.4 结构体指针</h3>\n<p>** 作用：** 通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符  <code>-&gt; </code> 可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n\nint main() &#123;\n\t\n\tstruct student stu = &#123; &quot;张三&quot;,18,100, &#125;;\n\t\n\tstruct student * p = &amp;stu;\n\t\n\tp-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"85-结构体嵌套结构体\"><a class=\"anchor\" href=\"#85-结构体嵌套结构体\">#</a> 8.5 结构体嵌套结构体</h3>\n<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p>** 例如：** 每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//教师结构体定义\nstruct teacher\n&#123;\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n&#125;;\n\n\nint main() &#123;\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = &quot;老王&quot;;\n\tt1.age = 40;\n\n\tt1.stu.name = &quot;张三&quot;;\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;\n\t\n\tcout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"86-结构体做函数参数\"><a class=\"anchor\" href=\"#86-结构体做函数参数\">#</a> 8.6 结构体做函数参数</h3>\n<p>** 作用：** 将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//值传递\nvoid printStudent(student stu )\n&#123;\n\tstu.age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n&#125;\n\n//地址传递\nvoid printStudent2(student *stu)\n&#123;\n\tstu-&gt;age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100&#125;;\n\t//值传递\n\tprintStudent(stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tcout &lt;&lt; endl;\n\n\t//地址传递\n\tprintStudent2(&amp;stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"87-结构体中-const使用场景\"><a class=\"anchor\" href=\"#87-结构体中-const使用场景\">#</a> 8.7 结构体中 const 使用场景</h3>\n<p>** 作用：** 用 const 来防止误操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//const使用场景\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n&#123;\n\t//stu-&gt;age = 100; //操作失败，因为加了const修饰\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100 &#125;;\n\n\tprintStudent(&amp;stu);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"88-结构体案例\"><a class=\"anchor\" href=\"#88-结构体案例\">#</a> 8.8 结构体案例</h3>\n<h4 id=\"881-案例1\"><a class=\"anchor\" href=\"#881-案例1\">#</a> 8.8.1 案例 1</h4>\n<p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">struct Student\n&#123;\n\tstring name;\n\tint score;\n&#125;;\nstruct Teacher\n&#123;\n\tstring name;\n\tStudent sArray[5];\n&#125;;\n\nvoid allocateSpace(Teacher tArray[] , int len)\n&#123;\n\tstring tName = &quot;教师&quot;;\n\tstring sName = &quot;学生&quot;;\n\tstring nameSeed = &quot;ABCDE&quot;;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printTeachers(Teacher tArray[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;\n\n\tTeacher tArray[3]; //老师数组\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\n\tallocateSpace(tArray, len); //创建数据\n\n\tprintTeachers(tArray, len); //打印数据\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"882-案例2\"><a class=\"anchor\" href=\"#882-案例2\">#</a> 8.8.2 案例 2</h4>\n<p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放 5 名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<pre><code class=\"language-C++\">\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//英雄结构体\nstruct hero\n&#123;\n\tstring name;\n\tint age;\n\tstring sex;\n&#125;;\n//冒泡排序\nvoid bubbleSort(hero arr[] , int len)\n&#123;\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j].age &gt; arr[j + 1].age)\n\t\t\t&#123;\n\t\t\t\thero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n//打印数组\nvoid printHeros(hero arr[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tstruct hero arr[5] =\n\t&#123;\n\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n\t&#125;;\n\n\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n\n\tprintHeros(arr, len); //打印\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        }
    ]
}