{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to 681",
    "subtitle": "欢迎来到681",
    "icon": "https://stdiostudy.github.io/images/favicon.ico",
    "description": "书山有路勤为径，学海无涯苦作舟。",
    "home_page_url": "https://StdioStudY.github.io",
    "items": [
        {
            "id": "https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "url": "https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "title": "关于博客图片无法显示的解决办法",
            "date_published": "2022-03-29T04:16:29.000Z",
            "content_html": "<h2 id=\"关于博客图片无法显示的解决办法\"><a class=\"anchor\" href=\"#关于博客图片无法显示的解决办法\">#</a> 关于博客图片无法显示的解决办法</h2>\n<p>大家好，我是 Lyang</p>\n<p>本人在尝试多种方法后，最终确定了一个能稳定显示本地图片的办法。</p>\n<p>首先我们要先了解 GitHub 的原理，它的原理是作为一个库来储存数据，达到建立网站的目的。hexo 便是一个能够运行网站，建立主题的插件。他们都是通过 win+r 运行 cmd 实现。（具体如何建立网站，以后我会详细写一个博客）</p>\n<p>界面美化：hexo</p>\n<ol>\n<li>安装插件。</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ npm install hexo-renderer-marked --save</pre></td></tr></table></figure><p>2. 再修改一下配置文件_config.yml，加入下面的配置。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>marked:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  prependRoot: true</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  postAsset: true</pre></td></tr></table></figure><p>如图所示：</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122703181.png\" alt=\"image-20220329122703181\" /></p>\n<p>3. 在 “Blog-&gt;source” 下新建 &quot;imags&quot; 文件夹。注意 &quot;imags&quot; 与 &quot;_posts&quot; 同级。</p>\n<p>4. 在 Typora 中 “文件 -&gt; 设置偏好 -&gt; 图像 “。在插入图片时” 复制到指定路径 “设置为</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>../../source/images//$&#123;filename&#125;</pre></td></tr></table></figure><p>以此图为例：</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/O_$7LOIQV$E@I9P%5D@VFI82F.png\" alt=\"1\" /></p>\n<p>5. 在” 格式 -&gt; 图像 -&gt; 设置图片根目录 “将 &quot;Blog-&gt;source&quot; 设置为根目录。</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122525499.png\" alt=\"image-20220329122525499\" /></p>\n<p>如此设置便可以正确显示图像。</p>\n<p>最后 hexo g 运行，hexo d 储存在服务器即可。</p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122844928.png\" alt=\"image-20220329122844928\" /></p>\n<p><img data-src=\"/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122922734.png\" alt=\"image-20220329122922734\" /></p>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        },
        {
            "id": "https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "url": "https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "title": "C++基础入门",
            "date_published": "2022-03-29T03:51:16.000Z",
            "content_html": "<h1 id=\"c基础入门\"><a class=\"anchor\" href=\"#c基础入门\">#</a> C++ 基础入门</h1>\n<h2 id=\"1-c初识\"><a class=\"anchor\" href=\"#1-c初识\">#</a> 1 C++ 初识</h2>\n<h3 id=\"11-第一个c程序\"><a class=\"anchor\" href=\"#11-第一个c程序\">#</a> 1.1  第一个 C++ 程序</h3>\n<p>编写一个 C++ 程序总共分为 4 个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"111-创建项目\"><a class=\"anchor\" href=\"#111-创建项目\">#</a> 1.1.1 创建项目</h4>\n<p>​\tVisual Studio 是我们用来编写 C++ 程序的主要工具，我们先将它打开</p>\n<p><img data-src=\"/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383178746.png\" alt=\"1\" /></p>\n<p><img data-src=\"/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383377380.png\" alt=\"2\" /></p>\n<h4 id=\"112-创建文件\"><a class=\"anchor\" href=\"#112-创建文件\">#</a> 1.1.2 创建文件</h4>\n<p>右键源文件，选择添加 -&gt; 新建项</p>\n<p><img data-src=\"/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383814237.png\" alt=\"3\" /></p>\n<p>给 C++ 文件起个名称，然后点击添加即可。</p>\n<p><img data-src=\"/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384140042.png\" alt=\"4\" /></p>\n<h4 id=\"113-编写代码\"><a class=\"anchor\" href=\"#113-编写代码\">#</a> 1.1.3 编写代码</h4>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"114-运行程序\"><a class=\"anchor\" href=\"#114-运行程序\">#</a> 1.1.4 运行程序</h4>\n<p><img data-src=\"/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384818688.png\" alt=\"5\" /></p>\n<h3 id=\"12-注释\"><a class=\"anchor\" href=\"#12-注释\">#</a> 1.2 注释</h3>\n<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>： <code>// 描述信息</code>\n<ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>：  <code>/* 描述信息 */</code>\n<ul>\n<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"13-变量\"><a class=\"anchor\" href=\"#13-变量\">#</a> 1.3 变量</h3>\n<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>： <code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"14-常量\"><a class=\"anchor\" href=\"#14-常量\">#</a> 1.4  常量</h3>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++ 定义常量两种方式</p>\n<ol>\n<li>\n<p><strong>#define</strong> 宏常量：  <code>#define 常量名 常量值</code></p>\n<ul>\n<li><mark>通常在文件上方定义</mark>，表示一个常量</li>\n</ul>\n</li>\n<li>\n<p><strong>const</strong> 修饰的变量  <code>const 数据类型 常量名 = 常量值</code></p>\n<ul>\n<li><mark>通常在变量定义前加关键字 const</mark>，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1、宏常量\n#define day 7\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"15-关键字\"><a class=\"anchor\" href=\"#15-关键字\">#</a> 1.5 关键字</h3>\n<p>** 作用：** 关键字是 C++ 中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++ 关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"16-标识符命名规则\"><a class=\"anchor\" href=\"#16-标识符命名规则\">#</a> 1.6 标识符命名规则</h3>\n<p><strong>作用</strong>：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<p>每日早上 8：00 持续更新！</p>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        }
    ]
}