<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>welcome to 681</title>
        <subtitle>欢迎来到681</subtitle>
        <icon>https://stdiostudy.github.io/images/favicon.ico</icon>
        <link>https://StdioStudY.github.io</link>
        <author>
          <name>早睡早起爱学习</name>
        </author>
        <description>书山有路勤为径，学海无涯苦作舟。</description>
        <language>zh-CN</language>
        <pubDate>Thu, 31 Mar 2022 14:37:09 +0800</pubDate>
        <lastBuildDate>Thu, 31 Mar 2022 14:37:09 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://stdiostudy.github.io/Math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
            <title>高等数学知识点总结</title>
            <link>https://stdiostudy.github.io/Math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
            <category term="高等数学" scheme="https://stdiostudy.github.io/categories/Math/" />
            <category term="高等数学" scheme="https://stdiostudy.github.io/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <category term="知识总结" scheme="https://stdiostudy.github.io/tags/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/" />
            <category term="线性代数" scheme="https://stdiostudy.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
            <category term="微积分" scheme="https://stdiostudy.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/" />
            <pubDate>Thu, 31 Mar 2022 14:37:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;高等数学上册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高等数学上册&#34;&gt;#&lt;/a&gt; 高等数学上册&lt;/h1&gt;
&lt;h2 id=&#34;七矢量代数与空间解析几何&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#七矢量代数与空间解析几何&#34;&gt;#&lt;/a&gt; 七。矢量代数与空间解析几何&lt;/h2&gt;
&lt;p&gt;作者：681CT（未经许可，禁止转载）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/image-20220331144334335.png&#34; alt=&#34;image-20220331144334335&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/image-20220331144346558.png&#34; alt=&#34;image-20220331144346558&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/image-20220331144402109.png&#34; alt=&#34;image-20220331144402109&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;高等数学下册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高等数学下册&#34;&gt;#&lt;/a&gt; 高等数学下册&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://stdiostudy.github.io/A-General-Course-in-Electromagnetism/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/</guid>
            <title>补充《电磁学通论》的库伦扭秤实验</title>
            <link>https://stdiostudy.github.io/A-General-Course-in-Electromagnetism/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/</link>
            <category term="电磁学通论" scheme="https://stdiostudy.github.io/categories/A-General-Course-in-Electromagnetism/" />
            <category term="电磁学,库仑定律" scheme="https://stdiostudy.github.io/tags/%E7%94%B5%E7%A3%81%E5%AD%A6-%E5%BA%93%E4%BB%91%E5%AE%9A%E5%BE%8B/" />
            <pubDate>Wed, 30 Mar 2022 11:08:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;补充电磁学通论的库伦扭秤实验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补充电磁学通论的库伦扭秤实验&#34;&gt;#&lt;/a&gt; 补充《电磁学通论》的库伦扭秤实验&lt;/h1&gt;
&lt;p&gt;简介：库伦定律是由法国物理学家库伦（C.A. de Coulomb) 在扭秤实验研究的基础上建立的两个点电荷相对作用力之间的规律。&lt;/p&gt;
&lt;h2 id=&#34;扭秤实验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扭秤实验&#34;&gt;#&lt;/a&gt; 扭秤实验&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/F21E29BB83B019360634EFE11BA46750.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;库仑扭秤由悬丝、横杆、两个带电金属小球（库仑最初的实验是用带电木髓小球进行的），一个平衡小球，一个递电小球、旋钮和&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTclQTMlODElRTklOTglQkIlRTUlQjAlQkMvMTAyNTcxOA==&#34;&gt;电磁阻尼&lt;/span&gt;部分等组成。两个带电金属小球中，一个固定在绝缘竖直支杆上，另一个固定在水平绝缘横杆的一端，横杆的另一端固定一个平衡小球。横杆的中心用悬丝吊起，和顶部的旋钮相连，转动旋钮，可以扭转悬丝带动绝缘横杆转动，停在某一适当的位置。横杆上的金属小球（称为动球）和竖直支杆上的固定小球都在以 O 为圆心，半杆长 L 为半径的圆周上，动球相对于固定小球的位置，可通过扭秤外壳上的刻线标出的圆心角来读出。当两个金属小球带电时，横杆在动球受到的库仑力力矩作用下旋转，悬丝发生扭转形变，悬丝的扭转力矩和库仑力力矩相平衡时，横杆处于静止状态。&lt;/p&gt;
&lt;p&gt;简单来说:&lt;strong&gt; 就是用丝绸摩擦过的玻璃棒来触碰一个不带电的小球，使其带负电。从玻璃罩上方进入，带负电的金属球发生偏转，达到平衡后从旋钮上的读角器读出角度，透过角度来计算库伦力使小球偏转的位移。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/BCA7335528A2779F7722274077CB5332.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/4DD08DB8BAA7AE60387A96253CA46866.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（字丑请见谅）&lt;/p&gt;
&lt;h2 id=&#34;库伦定律的得出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#库伦定律的得出&#34;&gt;#&lt;/a&gt; 库伦定律的得出&lt;/h2&gt;
&lt;h3 id=&#34;如何测出库伦力的大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何测出库伦力的大小&#34;&gt;#&lt;/a&gt; 如何测出库伦力的大小？&lt;/h3&gt;
&lt;p&gt;当然静电力是微弱的，但我们可以通过杠杆原理中的省力杠杆来实现（&lt;strong&gt;较小的力通过较长的力臂，产生较大的力矩，从而产生较大的转动，放大了作用效果&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;当平衡时库伦力力矩和扭转力矩相等：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;库伦力力矩&lt;/mtext&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;库&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;扭（扭转力矩）&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;库伦力力矩M库=M扭（扭转力矩）
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;库&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;伦&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;力&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;力&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;矩&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;库&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;扭&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;扭&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;力&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;矩&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;也就是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F1*l1=F2*l2
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（F1 为库仑力，L 为横杆的一半，l1=l2)&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mtext&gt;为扭力，&lt;/mtext&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;扭&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;扭&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F2为扭力，F2=M扭/l2,M扭=?
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;为&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;扭&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;力&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;扭&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;扭&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如何知道这个扭转力矩呢？解决这个问题的是库伦的另一个定律：&lt;strong&gt;扭力定律&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;扭力定律这里不需要细说了，我们只需要知道它的结论：扭转力矩与悬丝的扭转角成正比，与悬丝直径的四次方成正比，与悬丝的长度成反比就行了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/6HC%7DH2NC3LG06A$78XLFDQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/0K1__JAJ_%60FS%7BTB4H0WKQ2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由此，我们可以通过角度计算出库伦力的大小了&lt;/p&gt;
&lt;p&gt;那么库仑力与距离的关系呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/7S@OC%5BLSF%7DQU7LRP%25D_Q$T.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由此我们可以得到两个电荷的距离为 4:2:1 时，扭转角为 1:4:16，因为扭力大小与扭转角之间成正比，所以库伦力与电荷之间的距离成反比。&lt;/p&gt;
&lt;p&gt;那与电量成什么？&lt;/p&gt;
&lt;p&gt;以当时的手段，无法测出电量，但是我们却可以定量分析，我们可以保持距离一定，测量一次偏转角度，然后带电小球与另一个不带电的小球触碰，根据电量均分原理，带电小球的电量将减少一半，然后再保持相同距离测一次偏转角度。&lt;/p&gt;
&lt;p&gt;由此我们可以知道，库仑力是与电量成正比的，这些关系被概括成一个表达式，便是库伦定律的表达式了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/%E8%A1%A5%E5%85%85%E3%80%8A%E7%94%B5%E7%A3%81%E5%AD%A6%E9%80%9A%E8%AE%BA%E3%80%8B%E7%9A%84%E5%BA%93%E4%BC%A6%E6%89%AD%E7%A7%A4%E5%AE%9E%E9%AA%8C/%5BUNC$%5BIN4S8@M2%607WK2SU15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;参考文献:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[扭秤实验 - 百度百科](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODklQUQlRTclQTclQTQlRTUlQUUlOUUlRTklQUElOEMvNjM2Mzc3OT9mcj1hbGFkZGlu&#34;&gt;扭秤实验_百度百科 (baidu.com)&lt;/span&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《电磁学通论》- 北京大学出版社&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[库伦扭秤 - 百度百科](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOTMlRTQlQkIlOTElRTYlODklQUQlRTclQTclQTQvOTM5MzcxNA==&#34;&gt;库仑扭秤_百度百科 (baidu.com)&lt;/span&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
            <title>关于博客图片无法显示的解决办法</title>
            <link>https://stdiostudy.github.io/Computer-Science/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
            <category term="计算机科学" scheme="https://stdiostudy.github.io/categories/Computer-Science/" />
            <category term="计算机科学" scheme="https://stdiostudy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/" />
            <pubDate>Tue, 29 Mar 2022 12:16:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;关于博客图片无法显示的解决办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于博客图片无法显示的解决办法&#34;&gt;#&lt;/a&gt; 关于博客图片无法显示的解决办法&lt;/h2&gt;
&lt;p&gt;大家好，我是 Lyang&lt;/p&gt;
&lt;p&gt;本人在尝试多种方法后，最终确定了一个能稳定显示本地图片的办法。&lt;/p&gt;
&lt;p&gt;首先我们要先了解 GitHub 的原理，它的原理是作为一个库来储存数据，达到建立网站的目的。hexo 便是一个能够运行网站，建立主题的插件。他们都是通过 win+r 运行 cmd 实现。（具体如何建立网站，以后我会详细写一个博客）&lt;/p&gt;
&lt;p&gt;界面美化：hexo&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ npm install hexo-renderer-marked --save&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 再修改一下配置文件_config.yml，加入下面的配置。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;marked:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  prependRoot: true&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  postAsset: true&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122703181.png&#34; alt=&#34;image-20220329122703181&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 在 “Blog-&amp;gt;source” 下新建 &amp;quot;imags&amp;quot; 文件夹。注意 &amp;quot;imags&amp;quot; 与 &amp;quot;_posts&amp;quot; 同级。&lt;/p&gt;
&lt;p&gt;4. 在 Typora 中 “文件 -&amp;gt; 设置偏好 -&amp;gt; 图像 “。在插入图片时” 复制到指定路径 “设置为&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;../../source/images//$&amp;#123;filename&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以此图为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/O_$7LOIQV$E@I9P%5D@VFI82F.png&#34; alt=&#34;1&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5. 在” 格式 -&amp;gt; 图像 -&amp;gt; 设置图片根目录 “将 &amp;quot;Blog-&amp;gt;source&amp;quot; 设置为根目录。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122525499.png&#34; alt=&#34;image-20220329122525499&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如此设置便可以正确显示图像。&lt;/p&gt;
&lt;p&gt;最后 hexo g 运行，hexo d 储存在服务器即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122844928.png&#34; alt=&#34;image-20220329122844928&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20220329122922734.png&#34; alt=&#34;image-20220329122922734&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</guid>
            <title>C++基础入门</title>
            <link>https://stdiostudy.github.io/Computer-Science/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link>
            <category term="计算机科学" scheme="https://stdiostudy.github.io/categories/Computer-Science/" />
            <category term="计算机科学" scheme="https://stdiostudy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/" />
            <pubDate>Tue, 29 Mar 2022 11:51:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c基础入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c基础入门&#34;&gt;#&lt;/a&gt; C++ 基础入门&lt;/h1&gt;
&lt;h2 id=&#34;1-c初识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-c初识&#34;&gt;#&lt;/a&gt; 1 C++ 初识&lt;/h2&gt;
&lt;h3 id=&#34;11-第一个c程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-第一个c程序&#34;&gt;#&lt;/a&gt; 1.1  第一个 C++ 程序&lt;/h3&gt;
&lt;p&gt;编写一个 C++ 程序总共分为 4 个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建项目&lt;/li&gt;
&lt;li&gt;创建文件&lt;/li&gt;
&lt;li&gt;编写代码&lt;/li&gt;
&lt;li&gt;运行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;111-创建项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111-创建项目&#34;&gt;#&lt;/a&gt; 1.1.1 创建项目&lt;/h4&gt;
&lt;p&gt;​	Visual Studio 是我们用来编写 C++ 程序的主要工具，我们先将它打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383178746-16486280798692.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384366413.png&#34; alt=&#34;1541384366413&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;112-创建文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112-创建文件&#34;&gt;#&lt;/a&gt; 1.1.2 创建文件&lt;/h4&gt;
&lt;p&gt;右键源文件，选择添加 -&amp;gt; 新建项&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383817248.png&#34; alt=&#34;1541383817248&#34; /&gt;&lt;/p&gt;
&lt;p&gt;给 C++ 文件起个名称，然后点击添加即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384140042-16486282805841.png&#34; alt=&#34;1541384140042&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;113-编写代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#113-编写代码&#34;&gt;#&lt;/a&gt; 1.1.3 编写代码&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

int main() &amp;#123;

	cout &amp;lt;&amp;lt; &amp;quot;Hello world&amp;quot; &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;114-运行程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#114-运行程序&#34;&gt;#&lt;/a&gt; 1.1.4 运行程序&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384818688.png&#34; alt=&#34;1541384818688&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-注释&#34;&gt;#&lt;/a&gt; 1.2 注释&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种格式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单行注释&lt;/strong&gt;： &lt;code&gt;// 描述信息&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通常放在一行代码的上方，或者一条语句的末尾，&lt;mark&gt;对该行代码说明&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多行注释&lt;/strong&gt;：  &lt;code&gt;/* 描述信息 */&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通常放在一段代码的上方，&lt;mark&gt;对该段代码做整体说明&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：编译器在编译代码时，会忽略注释的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13-变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-变量&#34;&gt;#&lt;/a&gt; 1.3 变量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：给一段指定的内存空间起名，方便操作这段内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;： &lt;code&gt;数据类型 变量名 = 初始值;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

int main() &amp;#123;

	//变量的定义
	//语法：数据类型  变量名 = 初始值

	int a = 10;

	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;14-常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-常量&#34;&gt;#&lt;/a&gt; 1.4  常量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：用于记录程序中不可更改的数据&lt;/p&gt;
&lt;p&gt;C++ 定义常量两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;#define&lt;/strong&gt; 宏常量：  &lt;code&gt;#define 常量名 常量值&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;通常在文件上方定义&lt;/mark&gt;，表示一个常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; 修饰的变量  &lt;code&gt;const 数据类型 常量名 = 常量值&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;通常在变量定义前加关键字 const&lt;/mark&gt;，修饰该变量为常量，不可修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//1、宏常量
#define day 7

int main() &amp;#123;

	cout &amp;lt;&amp;lt; &amp;quot;一周里总共有 &amp;quot; &amp;lt;&amp;lt; day &amp;lt;&amp;lt; &amp;quot; 天&amp;quot; &amp;lt;&amp;lt; endl;
	//day = 8;  //报错，宏常量不可以修改

	//2、const修饰变量
	const int month = 12;
	cout &amp;lt;&amp;lt; &amp;quot;一年里总共有 &amp;quot; &amp;lt;&amp;lt; month &amp;lt;&amp;lt; &amp;quot; 个月份&amp;quot; &amp;lt;&amp;lt; endl;
	//month = 24; //报错，常量是不可以修改的
	
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-关键字&#34;&gt;#&lt;/a&gt; 1.5 关键字&lt;/h3&gt;
&lt;p&gt;** 作用：** 关键字是 C++ 中预先保留的单词（标识符）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在定义变量或者常量时候，不要用关键字&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 关键字如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;asm&lt;/th&gt;
&lt;th&gt;do&lt;/th&gt;
&lt;th&gt;if&lt;/th&gt;
&lt;th&gt;return&lt;/th&gt;
&lt;th&gt;typedef&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;auto&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;inline&lt;/td&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;typeid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;dynamic_cast&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;signed&lt;/td&gt;
&lt;td&gt;typename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;sizeof&lt;/td&gt;
&lt;td&gt;union&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;case&lt;/td&gt;
&lt;td&gt;enum&lt;/td&gt;
&lt;td&gt;mutable&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;unsigned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catch&lt;/td&gt;
&lt;td&gt;explicit&lt;/td&gt;
&lt;td&gt;namespace&lt;/td&gt;
&lt;td&gt;static_cast&lt;/td&gt;
&lt;td&gt;using&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;export&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;struct&lt;/td&gt;
&lt;td&gt;virtual&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;extern&lt;/td&gt;
&lt;td&gt;operator&lt;/td&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;template&lt;/td&gt;
&lt;td&gt;volatile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const_cast&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;wchar_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;throw&lt;/td&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;friend&lt;/td&gt;
&lt;td&gt;register&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;goto&lt;/td&gt;
&lt;td&gt;reinterpret_cast&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;16-标识符命名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-标识符命名规则&#34;&gt;#&lt;/a&gt; 1.6 标识符命名规则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标识符不能是关键字&lt;/li&gt;
&lt;li&gt;标识符只能由字母、数字、下划线组成&lt;/li&gt;
&lt;li&gt;第一个字符必须为字母或下划线&lt;/li&gt;
&lt;li&gt;标识符中字母区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-数据类型&#34;&gt;#&lt;/a&gt; 2 数据类型&lt;/h2&gt;
&lt;p&gt;C++ 规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存&lt;/p&gt;
&lt;h3 id=&#34;21-整型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-整型&#34;&gt;#&lt;/a&gt; 2.1 整型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：整型变量表示的是&lt;mark&gt;整数类型&lt;/mark&gt;的数据&lt;/p&gt;
&lt;p&gt;C++ 中能够表示整型的类型有以下几种方式，&lt;strong&gt;区别在于所占内存空间不同&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;占用空间&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;short (短整型)&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;(-2^15 ~ 2^15-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int (整型)&lt;/td&gt;
&lt;td&gt;4 字节&lt;/td&gt;
&lt;td&gt;(-2^31 ~ 2^31-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long (长整形)&lt;/td&gt;
&lt;td&gt;Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)&lt;/td&gt;
&lt;td&gt;(-2^31 ~ 2^31-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long long (长长整形)&lt;/td&gt;
&lt;td&gt;8 字节&lt;/td&gt;
&lt;td&gt;(-2^63 ~ 2^63-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;22-sizeof关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-sizeof关键字&#34;&gt;#&lt;/a&gt; 2.2 sizeof 关键字&lt;/h3&gt;
&lt;p&gt;** 作用：** 利用 sizeof 关键字可以&lt;mark&gt;统计数据类型所占内存大小&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;  &lt;code&gt;sizeof( 数据类型 / 变量)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	cout &amp;lt;&amp;lt; &amp;quot;short 类型所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(short) &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;int 类型所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;long 类型所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(long) &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;long long 类型所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(long long) &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;整型结论&lt;/strong&gt;：&lt;mark&gt;short &amp;lt; int &amp;lt;= long &amp;lt;= long long&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;23-实型浮点型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-实型浮点型&#34;&gt;#&lt;/a&gt; 2.3 实型（浮点型）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：用于&lt;mark&gt;表示小数&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;浮点型变量分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单精度 float&lt;/li&gt;
&lt;li&gt;双精度 double&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两者的&lt;strong&gt;区别&lt;/strong&gt;在于表示的有效数字范围不同。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;占用空间&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;有效数字范围&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;4 字节&lt;/td&gt;
&lt;td&gt;7 位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8 字节&lt;/td&gt;
&lt;td&gt;15～16 位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	float f1 = 3.14f;
	double d1 = 3.14;

	cout &amp;lt;&amp;lt; f1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; d1&amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;float  sizeof = &amp;quot; &amp;lt;&amp;lt; sizeof(f1) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;double sizeof = &amp;quot; &amp;lt;&amp;lt; sizeof(d1) &amp;lt;&amp;lt; endl;

	//科学计数法
	float f2 = 3e2; // 3 * 10 ^ 2 
	cout &amp;lt;&amp;lt; &amp;quot;f2 = &amp;quot; &amp;lt;&amp;lt; f2 &amp;lt;&amp;lt; endl;

	float f3 = 3e-2;  // 3 * 0.1 ^ 2
	cout &amp;lt;&amp;lt; &amp;quot;f3 = &amp;quot; &amp;lt;&amp;lt; f3 &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;24-字符型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-字符型&#34;&gt;#&lt;/a&gt; 2.4 字符型&lt;/h3&gt;
&lt;p&gt;** 作用：** 字符型变量用于显示单个字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt;char ch = &#39;a&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 2：单引号内只能有一个字符，不可以是字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;C 和 C++ 中字符型变量只占用&lt;mark&gt; 1 个字节&lt;/mark&gt;。&lt;/li&gt;
&lt;li&gt;字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;
	
	char ch = &#39;a&#39;;
	cout &amp;lt;&amp;lt; ch &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; sizeof(char) &amp;lt;&amp;lt; endl;

	//ch = &amp;quot;abcde&amp;quot;; //错误，不可以用双引号
	//ch = &#39;abcde&#39;; //错误，单引号内只能引用一个字符

	cout &amp;lt;&amp;lt; (int)ch &amp;lt;&amp;lt; endl;  //查看字符a对应的ASCII码
	ch = 97; //可以直接用ASCII给字符型变量赋值
	cout &amp;lt;&amp;lt; ch &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ASCII 码表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;ASCII&lt;/strong&gt; 值&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;控制字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ASCII&lt;/strong&gt; 值&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ASCII&lt;/strong&gt; 值&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ASCII&lt;/strong&gt; 值&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字符&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;NUT&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;(space)&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;、&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;SOH&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;STX&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&amp;quot;&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;ETX&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;EOT&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;ENQ&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;ACK&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;BEL&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;BS&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;72&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;HT&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;LF&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;VT&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;FF&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;CR&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;77&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;SO&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;SI&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;DLE&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;DCI&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;DC2&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;DC3&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;DC4&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;NAK&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;TB&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;87&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;CAN&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;EM&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;SUB&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;:&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;FS&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;GS&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;93&lt;/td&gt;
&lt;td&gt;]&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;RS&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;td&gt;`        |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;US&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;td&gt;DEL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ASCII 码大致由以下&lt;strong&gt;两部分组&lt;/strong&gt;成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASCII 非打印控制字符： ASCII 表上的数字 &lt;strong&gt;0-31&lt;/strong&gt; 分配给了控制字符，用于控制像打印机等一些外围设备。&lt;/li&gt;
&lt;li&gt;ASCII 打印字符：数字 &lt;strong&gt;32-126&lt;/strong&gt; 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-转义字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-转义字符&#34;&gt;#&lt;/a&gt; 2.5 转义字符&lt;/h3&gt;
&lt;p&gt;** 作用：** 用于表示一些&lt;mark&gt;不能显示出来的 ASCII 字符&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;现阶段我们常用的转义字符有： &lt;code&gt; \n  \\  \t&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;转义字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ASCII&lt;/strong&gt; 码值（十进制）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;警报&lt;/td&gt;
&lt;td&gt;007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;退格 (BS) ，将当前位置移到前一列&lt;/td&gt;
&lt;td&gt;008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;换页 (FF)，将当前位置移到下页开头&lt;/td&gt;
&lt;td&gt;012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;\n&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;换行 (LF) ，将当前位置移到下一行开头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;010&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车 (CR) ，将当前位置移到本行开头&lt;/td&gt;
&lt;td&gt;013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;\t&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;水平制表 (HT)  （跳到下一个 TAB 位置）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;009&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;垂直制表 (VT)&lt;/td&gt;
&lt;td&gt;011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;\\&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;代表一个反斜线字符 &amp;quot;&amp;quot;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;092&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#39;&lt;/td&gt;
&lt;td&gt;代表一个单引号（撇号）字符&lt;/td&gt;
&lt;td&gt;039&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;&lt;/td&gt;
&lt;td&gt;代表一个双引号字符&lt;/td&gt;
&lt;td&gt;034&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;代表一个问号&lt;/td&gt;
&lt;td&gt;063&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;数字 0&lt;/td&gt;
&lt;td&gt;000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ddd&lt;/td&gt;
&lt;td&gt;8 进制转义字符，d 范围 0~7&lt;/td&gt;
&lt;td&gt;3 位 8 进制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\xhh&lt;/td&gt;
&lt;td&gt;16 进制转义字符，h 范围 0&lt;sub&gt;9，a&lt;/sub&gt;f，A~F&lt;/td&gt;
&lt;td&gt;3 位 16 进制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;
	
	
	cout &amp;lt;&amp;lt; &amp;quot;\\&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;\tHello&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;\n&amp;quot; &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;26-字符串型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-字符串型&#34;&gt;#&lt;/a&gt; 2.6 字符串型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：用于表示一串字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种风格&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C 风格字符串&lt;/strong&gt;：  &lt;code&gt;char 变量名[] = &amp;quot;字符串值&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	char str1[] = &amp;quot;hello world&amp;quot;;
	cout &amp;lt;&amp;lt; str1 &amp;lt;&amp;lt; endl;
    
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：C 风格的字符串要用双引号括起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C++ 风格字符串&lt;/strong&gt;：   &lt;code&gt;string  变量名 = &amp;quot;字符串值&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	string str = &amp;quot;hello world&amp;quot;;
	cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：C++ 风格字符串，需要加入头文件 ==#include&amp;lt;string&amp;gt;==&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;27-布尔类型-bool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-布尔类型-bool&#34;&gt;#&lt;/a&gt; 2.7 布尔类型 bool&lt;/h3&gt;
&lt;p&gt;** 作用：** 布尔数据类型代表真或假的值&lt;/p&gt;
&lt;p&gt;bool 类型只有两个值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;true  --- 真（本质是 1）&lt;/li&gt;
&lt;li&gt;false --- 假（本质是 0）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;bool 类型占&lt;mark&gt; 1 个字节&lt;/mark&gt;大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	bool flag = true;
	cout &amp;lt;&amp;lt; flag &amp;lt;&amp;lt; endl; // 1

	flag = false;
	cout &amp;lt;&amp;lt; flag &amp;lt;&amp;lt; endl; // 0

	cout &amp;lt;&amp;lt; &amp;quot;size of bool = &amp;quot; &amp;lt;&amp;lt; sizeof(bool) &amp;lt;&amp;lt; endl; //1
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;28-数据的输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-数据的输入&#34;&gt;#&lt;/a&gt; 2.8 数据的输入&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用：用于从键盘获取数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 关键字：**cin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;  &lt;code&gt;cin &amp;gt;&amp;gt; 变量 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main()&amp;#123;

	//整型输入
	int a = 0;
	cout &amp;lt;&amp;lt; &amp;quot;请输入整型变量：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; a;
	cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	//浮点型输入
	double d = 0;
	cout &amp;lt;&amp;lt; &amp;quot;请输入浮点型变量：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; d;
	cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; endl;

	//字符型输入
	char ch = 0;
	cout &amp;lt;&amp;lt; &amp;quot;请输入字符型变量：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; ch;
	cout &amp;lt;&amp;lt; ch &amp;lt;&amp;lt; endl;

	//字符串型输入
	string str;
	cout &amp;lt;&amp;lt; &amp;quot;请输入字符串型变量：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; str;
	cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;

	//布尔类型输入
	bool flag = true;
	cout &amp;lt;&amp;lt; &amp;quot;请输入布尔型变量：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; flag;
	cout &amp;lt;&amp;lt; flag &amp;lt;&amp;lt; endl;
	system(&amp;quot;pause&amp;quot;);
	return EXIT_SUCCESS;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-运算符&#34;&gt;#&lt;/a&gt; 3 运算符&lt;/h2&gt;
&lt;p&gt;** 作用：** 用于执行代码的运算&lt;/p&gt;
&lt;p&gt;本章我们主要讲解以下几类运算符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;算术运算符&lt;/td&gt;
&lt;td&gt;用于处理四则运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;赋值运算符&lt;/td&gt;
&lt;td&gt;用于将表达式的值赋给变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;td&gt;用于表达式的比较，并返回一个真值或假值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑运算符&lt;/td&gt;
&lt;td&gt;用于根据表达式的值返回真值或假值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;31-算术运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-算术运算符&#34;&gt;#&lt;/a&gt; 3.1 算术运算符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：用于处理四则运算&lt;/p&gt;
&lt;p&gt;算术运算符包括以下符号：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;术语&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;正号&lt;/td&gt;
&lt;td&gt;+3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;负号&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加&lt;/td&gt;
&lt;td&gt;10 + 5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;减&lt;/td&gt;
&lt;td&gt;10 - 5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘&lt;/td&gt;
&lt;td&gt;10 * 5&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除&lt;/td&gt;
&lt;td&gt;10 / 5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取模 (取余)&lt;/td&gt;
&lt;td&gt;10 % 3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;前置递增&lt;/td&gt;
&lt;td&gt;a=2; b=++a;&lt;/td&gt;
&lt;td&gt;a=3; b=3;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;后置递增&lt;/td&gt;
&lt;td&gt;a=2; b=a++;&lt;/td&gt;
&lt;td&gt;a=3; b=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;前置递减&lt;/td&gt;
&lt;td&gt;a=2; b=--a;&lt;/td&gt;
&lt;td&gt;a=1; b=1;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;后置递减&lt;/td&gt;
&lt;td&gt;a=2; b=a--;&lt;/td&gt;
&lt;td&gt;a=1; b=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//加减乘除
int main() &amp;#123;

	int a1 = 10;
	int b1 = 3;

	cout &amp;lt;&amp;lt; a1 + b1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; a1 - b1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; a1 * b1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; a1 / b1 &amp;lt;&amp;lt; endl;  //两个整数相除结果依然是整数

	int a2 = 10;
	int b2 = 20;
	cout &amp;lt;&amp;lt; a2 / b2 &amp;lt;&amp;lt; endl; 

	int a3 = 10;
	int b3 = 0;
	//cout &amp;lt;&amp;lt; a3 / b3 &amp;lt;&amp;lt; endl; //报错，除数不可以为0


	//两个小数可以相除
	double d1 = 0.5;
	double d2 = 0.25;
	cout &amp;lt;&amp;lt; d1 / d2 &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：在除法运算中，除数不能为 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//取模
int main() &amp;#123;

	int a1 = 10;
	int b1 = 3;

	cout &amp;lt;&amp;lt; 10 % 3 &amp;lt;&amp;lt; endl;

	int a2 = 10;
	int b2 = 20;

	cout &amp;lt;&amp;lt; a2 % b2 &amp;lt;&amp;lt; endl;

	int a3 = 10;
	int b3 = 0;

	//cout &amp;lt;&amp;lt; a3 % b3 &amp;lt;&amp;lt; endl; //取模运算时，除数也不能为0

	//两个小数不可以取模
	double d1 = 3.14;
	double d2 = 1.1;

	//cout &amp;lt;&amp;lt; d1 % d2 &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：只有整型变量可以进行取模运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//递增
int main() &amp;#123;

	//后置递增
	int a = 10;
	a++; //等价于a = a + 1
	cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; // 11

	//前置递增
	int b = 10;
	++b;
	cout &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl; // 11

	//区别
	//前置递增先对变量进行++，再计算表达式
	int a2 = 10;
	int b2 = ++a2 * 10;
	cout &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; endl;

	//后置递增先计算表达式，后对变量进行++
	int a3 = 10;
	int b3 = a3++ * 10;
	cout &amp;lt;&amp;lt; b3 &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：前置递增先对变量进行 ++，再计算表达式，后置递增相反&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-赋值运算符&#34;&gt;#&lt;/a&gt; 3.2 赋值运算符&lt;/h3&gt;
&lt;p&gt;** 作用：** 用于将表达式的值赋给变量&lt;/p&gt;
&lt;p&gt;赋值运算符包括以下几个符号：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;术语&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;赋值&lt;/td&gt;
&lt;td&gt;a=2; b=3;&lt;/td&gt;
&lt;td&gt;a=2; b=3;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;加等于&lt;/td&gt;
&lt;td&gt;a=0; a+=2;&lt;/td&gt;
&lt;td&gt;a=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;减等于&lt;/td&gt;
&lt;td&gt;a=5; a-=3;&lt;/td&gt;
&lt;td&gt;a=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;乘等于&lt;/td&gt;
&lt;td&gt;a=2; a*=2;&lt;/td&gt;
&lt;td&gt;a=4;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;除等于&lt;/td&gt;
&lt;td&gt;a=4; a/=2;&lt;/td&gt;
&lt;td&gt;a=2;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;模等于&lt;/td&gt;
&lt;td&gt;a=3; a%2;&lt;/td&gt;
&lt;td&gt;a=1;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//赋值运算符

	// =
	int a = 10;
	a = 100;
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	// +=
	a = 10;
	a += 2; // a = a + 2;
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	// -=
	a = 10;
	a -= 2; // a = a - 2
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	// *=
	a = 10;
	a *= 2; // a = a * 2
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	// /=
	a = 10;
	a /= 2;  // a = a / 2;
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	// %=
	a = 10;
	a %= 2;  // a = a % 2;
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-比较运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-比较运算符&#34;&gt;#&lt;/a&gt; 3.3 比较运算符&lt;/h3&gt;
&lt;p&gt;** 作用：** 用于表达式的比较，并返回一个真值或假值&lt;/p&gt;
&lt;p&gt;比较运算符有以下符号：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;术语&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;相等于&lt;/td&gt;
&lt;td&gt;4 == 3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;td&gt;4 != 3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;4 &amp;lt; 3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;td&gt;4 &amp;gt; 3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;td&gt;4 &amp;lt;= 3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;td&gt;4 &amp;gt;= 1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int a = 10;
	int b = 20;

	cout &amp;lt;&amp;lt; (a == b) &amp;lt;&amp;lt; endl; // 0 

	cout &amp;lt;&amp;lt; (a != b) &amp;lt;&amp;lt; endl; // 1

	cout &amp;lt;&amp;lt; (a &amp;gt; b) &amp;lt;&amp;lt; endl; // 0

	cout &amp;lt;&amp;lt; (a &amp;lt; b) &amp;lt;&amp;lt; endl; // 1

	cout &amp;lt;&amp;lt; (a &amp;gt;= b) &amp;lt;&amp;lt; endl; // 0

	cout &amp;lt;&amp;lt; (a &amp;lt;= b) &amp;lt;&amp;lt; endl; // 1
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：C 和 C++ 语言的比较运算中， &lt;mark&gt;“真” 用数字 “1” 来表示， “假” 用数字 “0” 来表示。&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;34-逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-逻辑运算符&#34;&gt;#&lt;/a&gt; 3.4 逻辑运算符&lt;/h3&gt;
&lt;p&gt;** 作用：** 用于根据表达式的值返回真值或假值&lt;/p&gt;
&lt;p&gt;逻辑运算符有以下符号：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;术语&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td&gt;!a&lt;/td&gt;
&lt;td&gt;如果 a 为假，则！a 为真；  如果 a 为真，则！a 为假。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;与&lt;/td&gt;
&lt;td&gt;a &amp;amp;&amp;amp; b&lt;/td&gt;
&lt;td&gt;如果 a 和 b 都为真，则结果为真，否则为假。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td&gt;a || b&lt;/td&gt;
&lt;td&gt;如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;** 示例 1：** 逻辑非&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//逻辑运算符  --- 非
int main() &amp;#123;

	int a = 10;

	cout &amp;lt;&amp;lt; !a &amp;lt;&amp;lt; endl; // 0

	cout &amp;lt;&amp;lt; !!a &amp;lt;&amp;lt; endl; // 1

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结： 真变假，假变真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 示例 2：** 逻辑与&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//逻辑运算符  --- 与
int main() &amp;#123;

	int a = 10;
	int b = 10;

	cout &amp;lt;&amp;lt; (a &amp;amp;&amp;amp; b) &amp;lt;&amp;lt; endl;// 1

	a = 10;
	b = 0;

	cout &amp;lt;&amp;lt; (a &amp;amp;&amp;amp; b) &amp;lt;&amp;lt; endl;// 0 

	a = 0;
	b = 0;

	cout &amp;lt;&amp;lt; (a &amp;amp;&amp;amp; b) &amp;lt;&amp;lt; endl;// 0

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：逻辑&lt;mark&gt;与&lt;/mark&gt;运算符总结： &lt;mark&gt;同真为真，其余为假&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 示例 3：** 逻辑或&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//逻辑运算符  --- 或
int main() &amp;#123;

	int a = 10;
	int b = 10;

	cout &amp;lt;&amp;lt; (a || b) &amp;lt;&amp;lt; endl;// 1

	a = 10;
	b = 0;

	cout &amp;lt;&amp;lt; (a || b) &amp;lt;&amp;lt; endl;// 1 

	a = 0;
	b = 0;

	cout &amp;lt;&amp;lt; (a || b) &amp;lt;&amp;lt; endl;// 0

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;逻辑&lt;mark&gt;或&lt;/mark&gt;运算符总结： &lt;mark&gt;同假为假，其余为真&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-程序流程结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-程序流程结构&#34;&gt;#&lt;/a&gt; 4 程序流程结构&lt;/h2&gt;
&lt;p&gt;C/C++ 支持最基本的三种程序运行结构：&lt;mark&gt;顺序结构、选择结构、循环结构&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序结构：程序按顺序执行，不发生跳转&lt;/li&gt;
&lt;li&gt;选择结构：依据条件是否满足，有选择的执行相应功能&lt;/li&gt;
&lt;li&gt;循环结构：依据条件是否满足，循环多次执行某段代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-选择结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-选择结构&#34;&gt;#&lt;/a&gt; 4.1 选择结构&lt;/h3&gt;
&lt;h4 id=&#34;411-if语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#411-if语句&#34;&gt;#&lt;/a&gt; 4.1.1 if 语句&lt;/h4&gt;
&lt;p&gt;** 作用：** 执行满足条件的语句&lt;/p&gt;
&lt;p&gt;if 语句的三种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单行格式 if 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行格式 if 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多条件的 if 语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单行格式 if 语句： &lt;code&gt;if(条件)&amp;#123; 条件满足执行的语句 &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//选择结构-单行if语句
	//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印

	int score = 0;
	cout &amp;lt;&amp;lt; &amp;quot;请输入一个分数：&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; score;

	cout &amp;lt;&amp;lt; &amp;quot;您输入的分数为： &amp;quot; &amp;lt;&amp;lt; score &amp;lt;&amp;lt; endl;

	//if语句
	//注意事项，在if判断语句后面，不要加分号
	if (score &amp;gt; 600)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了一本大学！！！&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：if 条件表达式后不要加分号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多行格式 if 语句： &lt;code&gt;if(条件)&amp;#123; 条件满足执行的语句 &amp;#125;else&amp;#123; 条件不满足执行的语句 &amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662519170.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int score = 0;

	cout &amp;lt;&amp;lt; &amp;quot;请输入考试分数：&amp;quot; &amp;lt;&amp;lt; endl;

	cin &amp;gt;&amp;gt; score;

	if (score &amp;gt; 600)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了一本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我未考上一本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;多条件的 if 语句： &lt;code&gt;if(条件1)&amp;#123; 条件1满足执行的语句 &amp;#125;else if(条件2)&amp;#123;条件2满足执行的语句&amp;#125;... else&amp;#123; 都不满足执行的语句&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662566808.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;	int main() &amp;#123;

	int score = 0;

	cout &amp;lt;&amp;lt; &amp;quot;请输入考试分数：&amp;quot; &amp;lt;&amp;lt; endl;

	cin &amp;gt;&amp;gt; score;

	if (score &amp;gt; 600)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了一本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else if (score &amp;gt; 500)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了二本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else if (score &amp;gt; 400)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了三本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我未考上本科&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;嵌套 if 语句&lt;/strong&gt;：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断&lt;/p&gt;
&lt;p&gt;案例需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提示用户输入一个高考考试分数，根据分数做如下判断&lt;/li&gt;
&lt;li&gt;分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；&lt;/li&gt;
&lt;li&gt;在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int main() &amp;#123;

	int score = 0;

	cout &amp;lt;&amp;lt; &amp;quot;请输入考试分数：&amp;quot; &amp;lt;&amp;lt; endl;

	cin &amp;gt;&amp;gt; score;

	if (score &amp;gt; 600)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了一本大学&amp;quot; &amp;lt;&amp;lt; endl;
		if (score &amp;gt; 700)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;我考上了北大&amp;quot; &amp;lt;&amp;lt; endl;
		&amp;#125;
		else if (score &amp;gt; 650)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;我考上了清华&amp;quot; &amp;lt;&amp;lt; endl;
		&amp;#125;
		else
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;我考上了人大&amp;quot; &amp;lt;&amp;lt; endl;
		&amp;#125;
		
	&amp;#125;
	else if (score &amp;gt; 500)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了二本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else if (score &amp;gt; 400)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我考上了三本大学&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;
	else
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;我未考上本科&amp;quot; &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;练习案例：&lt;/strong&gt; 三只小猪称体重&lt;/p&gt;
&lt;p&gt;有三只小猪 ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg&#34; alt=&#34;三只小猪&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;412-三目运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#412-三目运算符&#34;&gt;#&lt;/a&gt; 4.1.2 三目运算符&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 通过三目运算符实现简单的判断&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt;表达式1 ? 表达式2 ：表达式3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；&lt;/p&gt;
&lt;p&gt;如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int a = 10;
	int b = 20;
	int c = 0;

	c = a &amp;gt; b ? a : b;
	cout &amp;lt;&amp;lt; &amp;quot;c = &amp;quot; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;

	//C++中三目运算符返回的是变量,可以继续赋值

	(a &amp;gt; b ? a : b) = 100;

	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;b = &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;c = &amp;quot; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;413-switch语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#413-switch语句&#34;&gt;#&lt;/a&gt; 4.1.3 switch 语句&lt;/h4&gt;
&lt;p&gt;** 作用：** 执行多条件分支语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;switch(表达式)

&amp;#123;

	case 结果1：执行语句;break;

	case 结果2：执行语句;break;

	...

	default:执行语句;break;

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//请给电影评分 
	//10 ~ 9   经典   
	// 8 ~ 7   非常好
	// 6 ~ 5   一般
	// 5分以下 烂片

	int score = 0;
	cout &amp;lt;&amp;lt; &amp;quot;请给电影打分&amp;quot; &amp;lt;&amp;lt; endl;
	cin &amp;gt;&amp;gt; score;

	switch (score)
	&amp;#123;
	case 10:
	case 9:
		cout &amp;lt;&amp;lt; &amp;quot;经典&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	case 8:
		cout &amp;lt;&amp;lt; &amp;quot;非常好&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	case 7:
	case 6:
		cout &amp;lt;&amp;lt; &amp;quot;一般&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	default:
		cout &amp;lt;&amp;lt; &amp;quot;烂片&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 1：switch 语句中表达式类型只能是整型或者字符型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 2：case 里如果没有 break，那么程序会一直向下执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率高，缺点是 switch 不可以判断区间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;42-循环结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-循环结构&#34;&gt;#&lt;/a&gt; 4.2 循环结构&lt;/h3&gt;
&lt;h4 id=&#34;421-while循环语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#421-while循环语句&#34;&gt;#&lt;/a&gt; 4.2.1 while 循环语句&lt;/h4&gt;
&lt;p&gt;** 作用：** 满足循环条件，执行循环语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt; while(循环条件)&amp;#123; 循环语句 &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;mark&gt;只要循环条件的结果为真，就执行循环语句&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541668640382.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int num = 0;
	while (num &amp;lt; 10)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;num = &amp;quot; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; endl;
		num++;
	&amp;#125;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;while 循环练习案例：&lt;/strong&gt;&lt;mark&gt;猜数字&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;** 案例描述：** 系统随机生成一个 1 到 100 之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg&#34; alt=&#34;猜数字&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;422-dowhile循环语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#422-dowhile循环语句&#34;&gt;#&lt;/a&gt; 4.2.2 do...while 循环语句&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 满足循环条件，执行循环语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;  &lt;code&gt;do&amp;#123; 循环语句 &amp;#125; while(循环条件);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;** 注意：** 与 while 的区别在于&lt;mark&gt; do...while 会先执行一次循环语句&lt;/mark&gt;，再判断循环条件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541671163478.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int num = 0;

	do
	&amp;#123;
		cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; endl;
		num++;

	&amp;#125; while (num &amp;lt; 10);
	
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：与 while 循环区别在于，do...while 先执行一次循环语句，再判断循环条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;练习案例：水仙花数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 案例描述：** 水仙花数是指一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身&lt;/p&gt;
&lt;p&gt;例如：1^3 + 5^3+ 3^3 = 153&lt;/p&gt;
&lt;p&gt;请利用 do...while 语句，求出所有 3 位数中的水仙花数&lt;/p&gt;
&lt;h4 id=&#34;423-for循环语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#423-for循环语句&#34;&gt;#&lt;/a&gt; 4.2.3 for 循环语句&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 满足循环条件，执行循环语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt; for(起始表达式;条件表达式;末尾循环体) &amp;#123; 循环语句; &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
	&amp;#125;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;详解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541673704101.png&#34; alt=&#34;1541673704101&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：for 循环中的表达式，要用分号进行分隔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：while , do...while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;练习案例：敲桌子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;案例描述：从 1 开始数到数字 100， 如果数字个位含有 7，或者数字十位含有 7，或者该数字是 7 的倍数，我们打印敲桌子，其余数字直接打印输出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/timg.gif&#34; alt=&#34;timg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;424-嵌套循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#424-嵌套循环&#34;&gt;#&lt;/a&gt; 4.2.4 嵌套循环&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 在循环体中再嵌套一层循环，解决一些实际问题&lt;/p&gt;
&lt;p&gt;例如我们想在屏幕中打印如下图片，就需要利用嵌套循环&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541676003486.png&#34; alt=&#34;1541676003486&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//外层循环执行1次，内层循环执行1轮
	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; 10; j++)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;*&amp;quot; &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
		&amp;#125;
		cout &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** 练习案例：** 乘法口诀表&lt;/p&gt;
&lt;p&gt;案例描述：利用嵌套循环，实现九九乘法表&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0006018857256120_b.jpg&#34; alt=&#34;0006018857256120_b&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;43-跳转语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-跳转语句&#34;&gt;#&lt;/a&gt; 4.3 跳转语句&lt;/h3&gt;
&lt;h4 id=&#34;431-break语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431-break语句&#34;&gt;#&lt;/a&gt; 4.3.1 break 语句&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用:&lt;/strong&gt; 用于跳出&lt;mark&gt;选择结构&lt;/mark&gt;或者&lt;mark&gt;循环结构&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;break 使用的时机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现在 switch 条件语句中，作用是终止 case 并跳出 switch&lt;/li&gt;
&lt;li&gt;出现在循环语句中，作用是跳出当前的循环语句&lt;/li&gt;
&lt;li&gt;出现在嵌套循环中，跳出最近的内层循环语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;
	//1、在switch 语句中使用break
	cout &amp;lt;&amp;lt; &amp;quot;请选择您挑战副本的难度：&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;1、普通&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;2、中等&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;3、困难&amp;quot; &amp;lt;&amp;lt; endl;

	int num = 0;

	cin &amp;gt;&amp;gt; num;

	switch (num)
	&amp;#123;
	case 1:
		cout &amp;lt;&amp;lt; &amp;quot;您选择的是普通难度&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	case 2:
		cout &amp;lt;&amp;lt; &amp;quot;您选择的是中等难度&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	case 3:
		cout &amp;lt;&amp;lt; &amp;quot;您选择的是困难难度&amp;quot; &amp;lt;&amp;lt; endl;
		break;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;
	//2、在循环语句中用break
	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		if (i == 5)
		&amp;#123;
			break; //跳出循环语句
		&amp;#125;
		cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;
	//在嵌套循环语句中使用break，退出内层循环
	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; 10; j++)
		&amp;#123;
			if (j == 5)
			&amp;#123;
				break;
			&amp;#125;
			cout &amp;lt;&amp;lt; &amp;quot;*&amp;quot; &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
		&amp;#125;
		cout &amp;lt;&amp;lt; endl;
	&amp;#125;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;432-continue语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#432-continue语句&#34;&gt;#&lt;/a&gt; 4.3.2 continue 语句&lt;/h4&gt;
&lt;p&gt;** 作用：** 在&lt;mark&gt;循环语句&lt;/mark&gt;中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	for (int i = 0; i &amp;lt; 100; i++)
	&amp;#123;
		if (i % 2 == 0)
		&amp;#123;
			continue;
		&amp;#125;
		cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
	&amp;#125;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：continue 并没有使整个循环终止，而 break 会跳出循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;433-goto语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#433-goto语句&#34;&gt;#&lt;/a&gt; 4.3.3 goto 语句&lt;/h4&gt;
&lt;p&gt;** 作用：** 可以无条件跳转语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;  &lt;code&gt;goto 标记;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;** 解释：** 如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; endl;

	goto FLAG;

	cout &amp;lt;&amp;lt; &amp;quot;2&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;3&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;4&amp;quot; &amp;lt;&amp;lt; endl;

	FLAG:

	cout &amp;lt;&amp;lt; &amp;quot;5&amp;quot; &amp;lt;&amp;lt; endl;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-数组&#34;&gt;#&lt;/a&gt; 5 数组&lt;/h2&gt;
&lt;h3 id=&#34;51-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-概述&#34;&gt;#&lt;/a&gt; 5.1 概述&lt;/h3&gt;
&lt;p&gt;所谓数组，就是一个集合，里面存放了相同类型的数据元素&lt;/p&gt;
&lt;p&gt;** 特点 1：** 数组中的每个&lt;mark&gt;数据元素都是相同的数据类型&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;** 特点 2：** 数组是由&lt;mark&gt;连续的内存&lt;/mark&gt;位置组成的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541748375356.png&#34; alt=&#34;1541748375356&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-一维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-一维数组&#34;&gt;#&lt;/a&gt; 5.2 一维数组&lt;/h3&gt;
&lt;h4 id=&#34;521-一维数组定义方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#521-一维数组定义方式&#34;&gt;#&lt;/a&gt; 5.2.1 一维数组定义方式&lt;/h4&gt;
&lt;p&gt;一维数组定义的三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ 数组长度 ];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ 数组长度 ] = &amp;#123; 值1，值2 ...&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ ] = &amp;#123; 值1，值2 ...&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//定义方式1
	//数据类型 数组名[元素个数];
	int score[10];

	//利用下标赋值
	score[0] = 100;
	score[1] = 99;
	score[2] = 85;

	//利用下标输出
	cout &amp;lt;&amp;lt; score[0] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; score[1] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; score[2] &amp;lt;&amp;lt; endl;


	//第二种定义方式
	//数据类型 数组名[元素个数] =  &amp;#123;值1，值2 ，值3 ...&amp;#125;;
	//如果&amp;#123;&amp;#125;内不足10个数据，剩余数据用0补全
	int score2[10] = &amp;#123; 100, 90,80,70,60,50,40,30,20,10 &amp;#125;;
	
	//逐个输出
	//cout &amp;lt;&amp;lt; score2[0] &amp;lt;&amp;lt; endl;
	//cout &amp;lt;&amp;lt; score2[1] &amp;lt;&amp;lt; endl;

	//一个一个输出太麻烦，因此可以利用循环进行输出
	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; score2[i] &amp;lt;&amp;lt; endl;
	&amp;#125;

	//定义方式3
	//数据类型 数组名[] =  &amp;#123;值1，值2 ，值3 ...&amp;#125;;
	int score3[] = &amp;#123; 100,90,80,70,60,50,40,30,20,10 &amp;#125;;

	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; score3[i] &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 2：数组中下标是从 0 开始索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;522-一维数组数组名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#522-一维数组数组名&#34;&gt;#&lt;/a&gt; 5.2.2 一维数组数组名&lt;/h4&gt;
&lt;p&gt;一维数组名称的&lt;strong&gt;用途&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以统计整个数组在内存中的长度&lt;/li&gt;
&lt;li&gt;可以获取数组在内存中的首地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//数组名用途
	//1、可以获取整个数组占用内存空间大小
	int arr[10] = &amp;#123; 1,2,3,4,5,6,7,8,9,10 &amp;#125;;

	cout &amp;lt;&amp;lt; &amp;quot;整个数组所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(arr) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;每个元素所占内存空间为： &amp;quot; &amp;lt;&amp;lt; sizeof(arr[0]) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;数组的元素个数为： &amp;quot; &amp;lt;&amp;lt; sizeof(arr) / sizeof(arr[0]) &amp;lt;&amp;lt; endl;

	//2、可以通过数组名获取到数组首地址
	cout &amp;lt;&amp;lt; &amp;quot;数组首地址为： &amp;quot; &amp;lt;&amp;lt; (int)arr &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;数组中第一个元素地址为： &amp;quot; &amp;lt;&amp;lt; (int)&amp;amp;arr[0] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;数组中第二个元素地址为： &amp;quot; &amp;lt;&amp;lt; (int)&amp;amp;arr[1] &amp;lt;&amp;lt; endl;

	//arr = 100; 错误，数组名是常量，因此不可以赋值


	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：数组名是常量，不可以赋值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 1：直接打印数组名，可以查看数组所占内存的首地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;练习案例 1&lt;/strong&gt;：五只小猪称体重&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个数组中记录了五只小猪的体重，如：int arr [5] = {300,350,200,400,250};&lt;/p&gt;
&lt;p&gt;找出并打印最重的小猪体重。&lt;/p&gt;
&lt;p&gt;** 练习案例 2：** 数组元素逆置&lt;/p&gt;
&lt;p&gt;** 案例描述：** 请声明一个 5 个元素的数组，并且将元素逆置.&lt;/p&gt;
&lt;p&gt;(如原数组元素为：1,3,2,5,4; 逆置后输出结果为：4,5,2,3,1);&lt;/p&gt;
&lt;h4 id=&#34;523-冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#523-冒泡排序&#34;&gt;#&lt;/a&gt; 5.2.3 冒泡排序&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 最常用的排序算法，对数组内元素进行排序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
&lt;li&gt;对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。&lt;/li&gt;
&lt;li&gt;重复以上的步骤，每次比较次数 - 1，直到不需要比较&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905327273.png&#34; alt=&#34;1541905327273&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt; 将数组 {4,2,8,0,5,7,1,3,9} 进行升序排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int arr[9] = &amp;#123; 4,2,8,0,5,7,1,3,9 &amp;#125;;

	for (int i = 0; i &amp;lt; 9 - 1; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; 9 - 1 - i; j++)
		&amp;#123;
			if (arr[j] &amp;gt; arr[j + 1])
			&amp;#123;
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			&amp;#125;
		&amp;#125;
	&amp;#125;

	for (int i = 0; i &amp;lt; 9; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl;
	&amp;#125;
    
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;53-二维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-二维数组&#34;&gt;#&lt;/a&gt; 5.3 二维数组&lt;/h3&gt;
&lt;p&gt;二维数组就是在一维数组上，多加一个维度。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/source/images/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905559138.png&#34; alt=&#34;1541905559138&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;531-二维数组定义方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#531-二维数组定义方式&#34;&gt;#&lt;/a&gt; 5.3.1 二维数组定义方式&lt;/h4&gt;
&lt;p&gt;二维数组定义的四种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ 行数 ][ 列数 ];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ 行数 ][ 列数 ] = &amp;#123; &amp;#123;数据1，数据2 &amp;#125; ，&amp;#123;数据3，数据4 &amp;#125; &amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据类型  数组名[ 行数 ][ 列数 ] = &amp;#123; 数据1，数据2，数据3，数据4&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt; 数据类型  数组名[  ][ 列数 ] = &amp;#123; 数据1，数据2，数据3，数据4&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;建议：以上 4 种定义方式，利用&lt;mark&gt;第二种更加直观，提高代码的可读性&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//方式1  
	//数组类型 数组名 [行数][列数]
	int arr[2][3];
	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[0][2] = 3;
	arr[1][0] = 4;
	arr[1][1] = 5;
	arr[1][2] = 6;

	for (int i = 0; i &amp;lt; 2; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; 3; j++)
		&amp;#123;
			cout &amp;lt;&amp;lt; arr[i][j] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
		&amp;#125;
		cout &amp;lt;&amp;lt; endl;
	&amp;#125;

	//方式2 
	//数据类型 数组名[行数][列数] = &amp;#123; &amp;#123;数据1，数据2 &amp;#125; ，&amp;#123;数据3，数据4 &amp;#125; &amp;#125;;
	int arr2[2][3] =
	&amp;#123;
		&amp;#123;1,2,3&amp;#125;,
		&amp;#123;4,5,6&amp;#125;
	&amp;#125;;

	//方式3
	//数据类型 数组名[行数][列数] = &amp;#123; 数据1，数据2 ,数据3，数据4  &amp;#125;;
	int arr3[2][3] = &amp;#123; 1,2,3,4,5,6 &amp;#125;; 

	//方式4 
	//数据类型 数组名[][列数] = &amp;#123; 数据1，数据2 ,数据3，数据4  &amp;#125;;
	int arr4[][3] = &amp;#123; 1,2,3,4,5,6 &amp;#125;;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：在定义二维数组时，如果初始化了数据，可以省略行数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;532-二维数组数组名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#532-二维数组数组名&#34;&gt;#&lt;/a&gt; 5.3.2 二维数组数组名&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看二维数组所占内存空间&lt;/li&gt;
&lt;li&gt;获取二维数组首地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//二维数组数组名
	int arr[2][3] =
	&amp;#123;
		&amp;#123;1,2,3&amp;#125;,
		&amp;#123;4,5,6&amp;#125;
	&amp;#125;;

	cout &amp;lt;&amp;lt; &amp;quot;二维数组大小： &amp;quot; &amp;lt;&amp;lt; sizeof(arr) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组一行大小： &amp;quot; &amp;lt;&amp;lt; sizeof(arr[0]) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组元素大小： &amp;quot; &amp;lt;&amp;lt; sizeof(arr[0][0]) &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;二维数组行数： &amp;quot; &amp;lt;&amp;lt; sizeof(arr) / sizeof(arr[0]) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组列数： &amp;quot; &amp;lt;&amp;lt; sizeof(arr[0]) / sizeof(arr[0][0]) &amp;lt;&amp;lt; endl;

	//地址
	cout &amp;lt;&amp;lt; &amp;quot;二维数组首地址：&amp;quot; &amp;lt;&amp;lt; arr &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组第一行地址：&amp;quot; &amp;lt;&amp;lt; arr[0] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组第二行地址：&amp;quot; &amp;lt;&amp;lt; arr[1] &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;二维数组第一个元素地址：&amp;quot; &amp;lt;&amp;lt; &amp;amp;arr[0][0] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;二维数组第二个元素地址：&amp;quot; &amp;lt;&amp;lt; &amp;amp;arr[0][1] &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 1：二维数组名就是这个数组的首地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;533-二维数组应用案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#533-二维数组应用案例&#34;&gt;#&lt;/a&gt; &lt;strong&gt;5.3.3 二维数组应用案例&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;考试成绩统计：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，&lt;strong&gt;请分别输出三名同学的总成绩&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int scores[3][3] =
	&amp;#123;
		&amp;#123;100,100,100&amp;#125;,
		&amp;#123;90,50,100&amp;#125;,
		&amp;#123;60,70,80&amp;#125;,
	&amp;#125;;

	string names[3] = &amp;#123; &amp;quot;张三&amp;quot;,&amp;quot;李四&amp;quot;,&amp;quot;王五&amp;quot; &amp;#125;;

	for (int i = 0; i &amp;lt; 3; i++)
	&amp;#123;
		int sum = 0;
		for (int j = 0; j &amp;lt; 3; j++)
		&amp;#123;
			sum += scores[i][j];
		&amp;#125;
		cout &amp;lt;&amp;lt; names[i] &amp;lt;&amp;lt; &amp;quot;同学总成绩为： &amp;quot; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-函数&#34;&gt;#&lt;/a&gt; 6 函数&lt;/h2&gt;
&lt;h3 id=&#34;61-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61-概述&#34;&gt;#&lt;/a&gt; 6.1 概述&lt;/h3&gt;
&lt;p&gt;** 作用：** 将一段经常使用的代码封装起来，减少重复代码&lt;/p&gt;
&lt;p&gt;一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。&lt;/p&gt;
&lt;h3 id=&#34;62-函数的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62-函数的定义&#34;&gt;#&lt;/a&gt; 6.2 函数的定义&lt;/h3&gt;
&lt;p&gt;函数的定义一般主要有 5 个步骤：&lt;/p&gt;
&lt;p&gt;1、返回值类型&lt;/p&gt;
&lt;p&gt;2、函数名&lt;/p&gt;
&lt;p&gt;3、参数表列&lt;/p&gt;
&lt;p&gt;4、函数体语句&lt;/p&gt;
&lt;p&gt;5、return 表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;返回值类型 函数名 （参数列表）
&amp;#123;

       函数体语句

       return表达式

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;返回值类型 ：一个函数可以返回一个值。在函数定义中&lt;/li&gt;
&lt;li&gt;函数名：给函数起个名称&lt;/li&gt;
&lt;li&gt;参数列表：使用该函数时，传入的数据&lt;/li&gt;
&lt;li&gt;函数体语句：花括号内的代码，函数内需要执行的语句&lt;/li&gt;
&lt;li&gt;return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 示例：** 定义一个加法函数，实现两个数相加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//函数定义
int add(int num1, int num2)
&amp;#123;
	int sum = num1 + num2;
	return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;63-函数的调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#63-函数的调用&#34;&gt;#&lt;/a&gt; 6.3 函数的调用&lt;/h3&gt;
&lt;p&gt;** 功能：** 使用定义好的函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt; 函数名（参数）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//函数定义
int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参
&amp;#123;
	int sum = num1 + num2;
	return sum;
&amp;#125;

int main() &amp;#123;

	int a = 10;
	int b = 10;
	//调用add函数
	int sum = add(a, b);//调用时的a，b称为实际参数，简称实参
	cout &amp;lt;&amp;lt; &amp;quot;sum = &amp;quot; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;

	a = 100;
	b = 100;

	sum = add(a, b);
	cout &amp;lt;&amp;lt; &amp;quot;sum = &amp;quot; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;64-值传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64-值传递&#34;&gt;#&lt;/a&gt; 6.4 值传递&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所谓值传递，就是函数调用时实参将数值传入给形参&lt;/li&gt;
&lt;li&gt;值传递时，&lt;mark&gt;如果形参发生，并不会影响实参&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void swap(int num1, int num2)
&amp;#123;
	cout &amp;lt;&amp;lt; &amp;quot;交换前：&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;num1 = &amp;quot; &amp;lt;&amp;lt; num1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;num2 = &amp;quot; &amp;lt;&amp;lt; num2 &amp;lt;&amp;lt; endl;

	int temp = num1;
	num1 = num2;
	num2 = temp;

	cout &amp;lt;&amp;lt; &amp;quot;交换后：&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;num1 = &amp;quot; &amp;lt;&amp;lt; num1 &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;num2 = &amp;quot; &amp;lt;&amp;lt; num2 &amp;lt;&amp;lt; endl;

	//return ; 当函数声明时候，不需要返回值，可以不写return
&amp;#125;

int main() &amp;#123;

	int a = 10;
	int b = 20;

	swap(a, b);

	cout &amp;lt;&amp;lt; &amp;quot;mian中的 a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;mian中的 b = &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结： 值传递时，形参是修饰不了实参的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;65-函数的常见样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#65-函数的常见样式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;6.5 函数的常见样式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;常见的函数样式有 4 种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无参无返&lt;/li&gt;
&lt;li&gt;有参无返&lt;/li&gt;
&lt;li&gt;无参有返&lt;/li&gt;
&lt;li&gt;有参有返&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//函数常见样式
//1、 无参无返
void test01()
&amp;#123;
	//void a = 10; //无类型不可以创建变量,原因无法分配内存
	cout &amp;lt;&amp;lt; &amp;quot;this is test01&amp;quot; &amp;lt;&amp;lt; endl;
	//test01(); 函数调用
&amp;#125;

//2、 有参无返
void test02(int a)
&amp;#123;
	cout &amp;lt;&amp;lt; &amp;quot;this is test02&amp;quot; &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;
&amp;#125;

//3、无参有返
int test03()
&amp;#123;
	cout &amp;lt;&amp;lt; &amp;quot;this is test03 &amp;quot; &amp;lt;&amp;lt; endl;
	return 10;
&amp;#125;

//4、有参有返
int test04(int a, int b)
&amp;#123;
	cout &amp;lt;&amp;lt; &amp;quot;this is test04 &amp;quot; &amp;lt;&amp;lt; endl;
	int sum = a + b;
	return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;66-函数的声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#66-函数的声明&#34;&gt;#&lt;/a&gt; 6.6 函数的声明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数的&lt;strong&gt;声明可以多次&lt;/strong&gt;，但是函数的&lt;strong&gt;定义只能有一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//声明可以多次，定义只能一次
//声明
int max(int a, int b);
int max(int a, int b);
//定义
int max(int a, int b)
&amp;#123;
	return a &amp;gt; b ? a : b;
&amp;#125;

int main() &amp;#123;

	int a = 100;
	int b = 200;

	cout &amp;lt;&amp;lt; max(a, b) &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;67-函数的分文件编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#67-函数的分文件编写&#34;&gt;#&lt;/a&gt; 6.7 函数的分文件编写&lt;/h3&gt;
&lt;p&gt;** 作用：** 让代码结构更加清晰&lt;/p&gt;
&lt;p&gt;函数分文件编写一般有 4 个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建后缀名为.h 的头文件&lt;/li&gt;
&lt;li&gt;创建后缀名为.cpp 的源文件&lt;/li&gt;
&lt;li&gt;在头文件中写函数的声明&lt;/li&gt;
&lt;li&gt;在源文件中写函数的定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//swap.h文件
#include&amp;lt;iostream&amp;gt;
using namespace std;

//实现两个数字交换的函数声明
void swap(int a, int b);

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//swap.cpp文件
#include &amp;quot;swap.h&amp;quot;

void swap(int a, int b)
&amp;#123;
	int temp = a;
	a = b;
	b = temp;

	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;b = &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//main函数文件
#include &amp;quot;swap.h&amp;quot;
int main() &amp;#123;

	int a = 100;
	int b = 200;
	swap(a, b);

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-指针&#34;&gt;#&lt;/a&gt; 7 指针&lt;/h2&gt;
&lt;h3 id=&#34;71-指针的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#71-指针的基本概念&#34;&gt;#&lt;/a&gt; 7.1 指针的基本概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;指针的作用：&lt;/strong&gt; 可以通过指针间接访问内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存编号是从 0 开始记录的，一般用十六进制数字表示&lt;/li&gt;
&lt;li&gt;可以利用指针变量保存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;72-指针变量的定义和使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#72-指针变量的定义和使用&#34;&gt;#&lt;/a&gt; 7.2 指针变量的定义和使用&lt;/h3&gt;
&lt;p&gt;指针变量定义语法：  &lt;code&gt;数据类型 * 变量名；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//1、指针的定义
	int a = 10; //定义整型变量a
	
	//指针定义语法： 数据类型 * 变量名 ;
	int * p;

	//指针变量赋值
	p = &amp;amp;a; //指针指向变量a的地址
	cout &amp;lt;&amp;lt; &amp;amp;a &amp;lt;&amp;lt; endl; //打印数据a的地址
	cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; endl;  //打印指针变量p

	//2、指针的使用
	//通过*操作指针变量指向的内存
	cout &amp;lt;&amp;lt; &amp;quot;*p = &amp;quot; &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指针变量和普通变量的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通变量存放的是数据，指针变量存放的是地址&lt;/li&gt;
&lt;li&gt;指针变量可以通过 &amp;quot;*&amp;quot; 操作符，操作指针变量指向的内存空间，这个过程称为解引用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 1： 我们可以通过 &amp;amp; 符号 获取变量的地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 2：利用指针可以记录地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 3：对指针变量解引用，可以操作指针指向的内存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;73-指针所占内存空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#73-指针所占内存空间&#34;&gt;#&lt;/a&gt; 7.3 指针所占内存空间&lt;/h3&gt;
&lt;p&gt;提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int a = 10;

	int * p;
	p = &amp;amp;a; //指针指向数据a的地址

	cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl; //* 解引用
	cout &amp;lt;&amp;lt; sizeof(p) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; sizeof(char *) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; sizeof(float *) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; sizeof(double *) &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：所有指针类型在 32 位操作系统下是 4 个字节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;74-空指针和野指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#74-空指针和野指针&#34;&gt;#&lt;/a&gt; 7.4 空指针和野指针&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;空指针&lt;/strong&gt;：指针变量指向内存中编号为 0 的空间&lt;/p&gt;
&lt;p&gt;** 用途：** 初始化指针变量&lt;/p&gt;
&lt;p&gt;** 注意：** 空指针指向的内存是不可以访问的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：空指针&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//指针变量p指向内存地址编号为0的空间
	int * p = NULL;

	//访问空指针报错 
	//内存编号0 ~255为系统占用内存，不允许用户访问
	cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;野指针&lt;/strong&gt;：指针变量指向非法的内存空间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：野指针&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	//指针变量p指向内存地址编号为0x1100的空间
	int * p = (int *)0x1100;

	//访问野指针报错 
	cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：空指针和野指针都不是我们申请的空间，因此不要访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;75-const修饰指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#75-const修饰指针&#34;&gt;#&lt;/a&gt; 7.5 const 修饰指针&lt;/h3&gt;
&lt;p&gt;const 修饰指针有三种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;const 修饰指针   --- 常量指针&lt;/li&gt;
&lt;li&gt;const 修饰常量   --- 指针常量&lt;/li&gt;
&lt;li&gt;const 即修饰指针，又修饰常量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int main() &amp;#123;

	int a = 10;
	int b = 10;

	//const修饰的是指针，指针指向可以改，指针指向的值不可以更改
	const int * p1 = &amp;amp;a; 
	p1 = &amp;amp;b; //正确
	//*p1 = 100;  报错
	

	//const修饰的是常量，指针指向不可以改，指针指向的值可以更改
	int * const p2 = &amp;amp;a;
	//p2 = &amp;amp;b; //错误
	*p2 = 100; //正确

    //const既修饰指针又修饰常量
	const int * const p3 = &amp;amp;a;
	//p3 = &amp;amp;b; //错误
	//*p3 = 100; //错误

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;76-指针和数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#76-指针和数组&#34;&gt;#&lt;/a&gt; 7.6 指针和数组&lt;/h3&gt;
&lt;p&gt;** 作用：** 利用指针访问数组中元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int main() &amp;#123;

	int arr[] = &amp;#123; 1,2,3,4,5,6,7,8,9,10 &amp;#125;;

	int * p = arr;  //指向数组的指针

	cout &amp;lt;&amp;lt; &amp;quot;第一个元素： &amp;quot; &amp;lt;&amp;lt; arr[0] &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;指针访问第一个元素： &amp;quot; &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl;

	for (int i = 0; i &amp;lt; 10; i++)
	&amp;#123;
		//利用指针遍历数组
		cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl;
		p++;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;77-指针和函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#77-指针和函数&#34;&gt;#&lt;/a&gt; 7.7 指针和函数&lt;/h3&gt;
&lt;p&gt;** 作用：** 利用指针作函数参数，可以修改实参的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//值传递
void swap1(int a ,int b)
&amp;#123;
	int temp = a;
	a = b; 
	b = temp;
&amp;#125;
//地址传递
void swap2(int * p1, int *p2)
&amp;#123;
	int temp = *p1;
	*p1 = *p2;
	*p2 = temp;
&amp;#125;

int main() &amp;#123;

	int a = 10;
	int b = 20;
	swap1(a, b); // 值传递不会改变实参

	swap2(&amp;amp;a, &amp;amp;b); //地址传递会改变实参

	cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; &amp;quot;b = &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;78-指针-数组-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#78-指针-数组-函数&#34;&gt;#&lt;/a&gt; 7.8 指针、数组、函数&lt;/h3&gt;
&lt;p&gt;** 案例描述：** 封装一个函数，利用冒泡排序，实现对整型数组的升序排序&lt;/p&gt;
&lt;p&gt;例如数组：int arr [10] = { 4,3,6,9,1,2,10,8,7,5 };&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//冒泡排序函数
void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]
&amp;#123;
	for (int i = 0; i &amp;lt; len - 1; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; len - 1 - i; j++)
		&amp;#123;
			if (arr[j] &amp;gt; arr[j + 1])
			&amp;#123;
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			&amp;#125;
		&amp;#125;
	&amp;#125;
&amp;#125;

//打印数组函数
void printArray(int arr[], int len)
&amp;#123;
	for (int i = 0; i &amp;lt; len; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl;
	&amp;#125;
&amp;#125;

int main() &amp;#123;

	int arr[10] = &amp;#123; 4,3,6,9,1,2,10,8,7,5 &amp;#125;;
	int len = sizeof(arr) / sizeof(int);

	bubbleSort(arr, len);

	printArray(arr, len);

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;8-结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-结构体&#34;&gt;#&lt;/a&gt; 8 结构体&lt;/h2&gt;
&lt;h3 id=&#34;81-结构体基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#81-结构体基本概念&#34;&gt;#&lt;/a&gt; 8.1 结构体基本概念&lt;/h3&gt;
&lt;p&gt;结构体属于用户&lt;mark&gt;自定义的数据类型&lt;/mark&gt;，允许用户存储不同的数据类型&lt;/p&gt;
&lt;h3 id=&#34;82-结构体定义和使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#82-结构体定义和使用&#34;&gt;#&lt;/a&gt; 8.2 结构体定义和使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt;struct 结构体名 &amp;#123; 结构体成员列表 &amp;#125;；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过结构体创建变量的方式有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct 结构体名 变量名&lt;/li&gt;
&lt;li 成员1值=&#34;&#34; ，=&#34;&#34; 成员2值...=&#34;&#34;&gt;struct 结构体名 变量名 =&lt;/li&gt;
&lt;li&gt;定义结构体时顺便创建变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;stu3; //结构体变量创建方式3 


int main() &amp;#123;

	//结构体变量创建方式1
	struct student stu1; //struct 关键字可以省略

	stu1.name = &amp;quot;张三&amp;quot;;
	stu1.age = 18;
	stu1.score = 100;
	
	cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; stu1.name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; stu1.age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu1.score &amp;lt;&amp;lt; endl;

	//结构体变量创建方式2
	struct student stu2 = &amp;#123; &amp;quot;李四&amp;quot;,19,60 &amp;#125;;

	cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; stu2.name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; stu2.age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu2.score &amp;lt;&amp;lt; endl;


	stu3.name = &amp;quot;王五&amp;quot;;
	stu3.age = 18;
	stu3.score = 80;
	

	cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; stu3.name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; stu3.age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu3.score &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 1：定义结构体时的关键字是 struct，不可省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 2：创建结构体变量时，关键字 struct 可以省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总结 3：结构体变量利用操作符 &#39;&#39;.&#39;&#39;  访问成员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;83-结构体数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#83-结构体数组&#34;&gt;#&lt;/a&gt; 8.3 结构体数组&lt;/h3&gt;
&lt;p&gt;** 作用：** 将自定义的结构体放入到数组中方便维护&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt; struct  结构体名 数组名[元素个数] = &amp;#123;  &amp;#123;&amp;#125; , &amp;#123;&amp;#125; , ... &amp;#123;&amp;#125; &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;

int main() &amp;#123;
	
	//结构体数组
	struct student arr[3]=
	&amp;#123;
		&amp;#123;&amp;quot;张三&amp;quot;,18,80 &amp;#125;,
		&amp;#123;&amp;quot;李四&amp;quot;,19,60 &amp;#125;,
		&amp;#123;&amp;quot;王五&amp;quot;,20,70 &amp;#125;
	&amp;#125;;

	for (int i = 0; i &amp;lt; 3; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; arr[i].name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; arr[i].age &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; arr[i].score &amp;lt;&amp;lt; endl;
	&amp;#125;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;84-结构体指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#84-结构体指针&#34;&gt;#&lt;/a&gt; 8.4 结构体指针&lt;/h3&gt;
&lt;p&gt;** 作用：** 通过指针访问结构体中的成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用操作符  &lt;code&gt;-&amp;gt; &lt;/code&gt; 可以通过结构体指针访问结构体属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;;


int main() &amp;#123;
	
	struct student stu = &amp;#123; &amp;quot;张三&amp;quot;,18,100, &amp;#125;;
	
	struct student * p = &amp;amp;stu;
	
	p-&amp;gt;score = 80; //指针通过 -&amp;gt; 操作符可以访问成员

	cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; p-&amp;gt;name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; p-&amp;gt;age &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; p-&amp;gt;score &amp;lt;&amp;lt; endl;
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：结构体指针可以通过 -&amp;gt; 操作符 来访问结构体中的成员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;85-结构体嵌套结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#85-结构体嵌套结构体&#34;&gt;#&lt;/a&gt; 8.5 结构体嵌套结构体&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 结构体中的成员可以是另一个结构体&lt;/p&gt;
&lt;p&gt;** 例如：** 每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//学生结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;;

//教师结构体定义
struct teacher
&amp;#123;
    //成员列表
	int id; //职工编号
	string name;  //教师姓名
	int age;   //教师年龄
	struct student stu; //子结构体 学生
&amp;#125;;


int main() &amp;#123;

	struct teacher t1;
	t1.id = 10000;
	t1.name = &amp;quot;老王&amp;quot;;
	t1.age = 40;

	t1.stu.name = &amp;quot;张三&amp;quot;;
	t1.stu.age = 18;
	t1.stu.score = 100;

	cout &amp;lt;&amp;lt; &amp;quot;教师 职工编号： &amp;quot; &amp;lt;&amp;lt; t1.id &amp;lt;&amp;lt; &amp;quot; 姓名： &amp;quot; &amp;lt;&amp;lt; t1.name &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; t1.age &amp;lt;&amp;lt; endl;
	
	cout &amp;lt;&amp;lt; &amp;quot;辅导学员 姓名： &amp;quot; &amp;lt;&amp;lt; t1.stu.name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; t1.stu.age &amp;lt;&amp;lt; &amp;quot; 考试分数： &amp;quot; &amp;lt;&amp;lt; t1.stu.score &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** 总结：** 在结构体中可以定义另一个结构体作为成员，用来解决实际问题&lt;/p&gt;
&lt;h3 id=&#34;86-结构体做函数参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#86-结构体做函数参数&#34;&gt;#&lt;/a&gt; 8.6 结构体做函数参数&lt;/h3&gt;
&lt;p&gt;** 作用：** 将结构体作为参数向函数中传递&lt;/p&gt;
&lt;p&gt;传递方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值传递&lt;/li&gt;
&lt;li&gt;地址传递&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//学生结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;;

//值传递
void printStudent(student stu )
&amp;#123;
	stu.age = 28;
	cout &amp;lt;&amp;lt; &amp;quot;子函数中 姓名：&amp;quot; &amp;lt;&amp;lt; stu.name &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; stu.age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu.score &amp;lt;&amp;lt; endl;
&amp;#125;

//地址传递
void printStudent2(student *stu)
&amp;#123;
	stu-&amp;gt;age = 28;
	cout &amp;lt;&amp;lt; &amp;quot;子函数中 姓名：&amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;name &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;score &amp;lt;&amp;lt; endl;
&amp;#125;

int main() &amp;#123;

	student stu = &amp;#123; &amp;quot;张三&amp;quot;,18,100&amp;#125;;
	//值传递
	printStudent(stu);
	cout &amp;lt;&amp;lt; &amp;quot;主函数中 姓名：&amp;quot; &amp;lt;&amp;lt; stu.name &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; stu.age &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu.score &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; endl;

	//地址传递
	printStudent2(&amp;amp;stu);
	cout &amp;lt;&amp;lt; &amp;quot;主函数中 姓名：&amp;quot; &amp;lt;&amp;lt; stu.name &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; stu.age  &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu.score &amp;lt;&amp;lt; endl;

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：如果不想修改主函数中的数据，用值传递，反之用地址传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;87-结构体中-const使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#87-结构体中-const使用场景&#34;&gt;#&lt;/a&gt; 8.7 结构体中 const 使用场景&lt;/h3&gt;
&lt;p&gt;** 作用：** 用 const 来防止误操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//学生结构体定义
struct student
&amp;#123;
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
&amp;#125;;

//const使用场景
void printStudent(const student *stu) //加const防止函数体中的误操作
&amp;#123;
	//stu-&amp;gt;age = 100; //操作失败，因为加了const修饰
	cout &amp;lt;&amp;lt; &amp;quot;姓名：&amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;name &amp;lt;&amp;lt; &amp;quot; 年龄：&amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;age &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; stu-&amp;gt;score &amp;lt;&amp;lt; endl;

&amp;#125;

int main() &amp;#123;

	student stu = &amp;#123; &amp;quot;张三&amp;quot;,18,100 &amp;#125;;

	printStudent(&amp;amp;stu);

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;88-结构体案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#88-结构体案例&#34;&gt;#&lt;/a&gt; 8.8 结构体案例&lt;/h3&gt;
&lt;h4 id=&#34;881-案例1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#881-案例1&#34;&gt;#&lt;/a&gt; 8.8.1 案例 1&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;案例描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下&lt;/p&gt;
&lt;p&gt;设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员&lt;/p&gt;
&lt;p&gt;学生的成员有姓名、考试分数，创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值&lt;/p&gt;
&lt;p&gt;最终打印出老师数据以及老师所带的学生数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct Student
&amp;#123;
	string name;
	int score;
&amp;#125;;
struct Teacher
&amp;#123;
	string name;
	Student sArray[5];
&amp;#125;;

void allocateSpace(Teacher tArray[] , int len)
&amp;#123;
	string tName = &amp;quot;教师&amp;quot;;
	string sName = &amp;quot;学生&amp;quot;;
	string nameSeed = &amp;quot;ABCDE&amp;quot;;
	for (int i = 0; i &amp;lt; len; i++)
	&amp;#123;
		tArray[i].name = tName + nameSeed[i];
		
		for (int j = 0; j &amp;lt; 5; j++)
		&amp;#123;
			tArray[i].sArray[j].name = sName + nameSeed[j];
			tArray[i].sArray[j].score = rand() % 61 + 40;
		&amp;#125;
	&amp;#125;
&amp;#125;

void printTeachers(Teacher tArray[], int len)
&amp;#123;
	for (int i = 0; i &amp;lt; len; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; tArray[i].name &amp;lt;&amp;lt; endl;
		for (int j = 0; j &amp;lt; 5; j++)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;\t姓名：&amp;quot; &amp;lt;&amp;lt; tArray[i].sArray[j].name &amp;lt;&amp;lt; &amp;quot; 分数：&amp;quot; &amp;lt;&amp;lt; tArray[i].sArray[j].score &amp;lt;&amp;lt; endl;
		&amp;#125;
	&amp;#125;
&amp;#125;

int main() &amp;#123;

	srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &amp;lt;ctime&amp;gt;

	Teacher tArray[3]; //老师数组

	int len = sizeof(tArray) / sizeof(Teacher);

	allocateSpace(tArray, len); //创建数据

	printTeachers(tArray, len); //打印数据
	
	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;882-案例2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#882-案例2&#34;&gt;#&lt;/a&gt; 8.8.2 案例 2&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;案例描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放 5 名英雄。&lt;/p&gt;
&lt;p&gt;通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。&lt;/p&gt;
&lt;p&gt;五名英雄信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;		&amp;#123;&amp;quot;刘备&amp;quot;,23,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;关羽&amp;quot;,22,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;张飞&amp;quot;,20,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;赵云&amp;quot;,21,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;貂蝉&amp;quot;,19,&amp;quot;女&amp;quot;&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//英雄结构体
struct hero
&amp;#123;
	string name;
	int age;
	string sex;
&amp;#125;;
//冒泡排序
void bubbleSort(hero arr[] , int len)
&amp;#123;
	for (int i = 0; i &amp;lt; len - 1; i++)
	&amp;#123;
		for (int j = 0; j &amp;lt; len - 1 - i; j++)
		&amp;#123;
			if (arr[j].age &amp;gt; arr[j + 1].age)
			&amp;#123;
				hero temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			&amp;#125;
		&amp;#125;
	&amp;#125;
&amp;#125;
//打印数组
void printHeros(hero arr[], int len)
&amp;#123;
	for (int i = 0; i &amp;lt; len; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;姓名： &amp;quot; &amp;lt;&amp;lt; arr[i].name &amp;lt;&amp;lt; &amp;quot; 性别： &amp;quot; &amp;lt;&amp;lt; arr[i].sex &amp;lt;&amp;lt; &amp;quot; 年龄： &amp;quot; &amp;lt;&amp;lt; arr[i].age &amp;lt;&amp;lt; endl;
	&amp;#125;
&amp;#125;

int main() &amp;#123;

	struct hero arr[5] =
	&amp;#123;
		&amp;#123;&amp;quot;刘备&amp;quot;,23,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;关羽&amp;quot;,22,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;张飞&amp;quot;,20,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;赵云&amp;quot;,21,&amp;quot;男&amp;quot;&amp;#125;,
		&amp;#123;&amp;quot;貂蝉&amp;quot;,19,&amp;quot;女&amp;quot;&amp;#125;,
	&amp;#125;;

	int len = sizeof(arr) / sizeof(hero); //获取数组元素个数

	bubbleSort(arr, len); //排序

	printHeros(arr, len); //打印

	system(&amp;quot;pause&amp;quot;);

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
    </channel>
</rss>
